<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TBookRev2b.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TBookRev2b.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon May 25 10:37:46 2020
<BR><P>
<H3>Maximum Stack Usage =       2232 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
talking_book &rArr; initControlManager &rArr; readControlDef &rArr; parseFile &rArr; parseValue &rArr; parseLstObj &rArr;  parseValue (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d]">BusFault_Handler</a>
 <LI><a href="#[b]">HardFault_Handler</a>
 <LI><a href="#[c]">MemManage_Handler</a>
 <LI><a href="#[a]">NMI_Handler</a>
 <LI><a href="#[e]">UsageFault_Handler</a>
 <LI><a href="#[1b4]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[27]">CAN1_RX0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">CAN1_RX0_IRQHandler</a><BR>
 <LI><a href="#[3c2]">enableInputs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d7]">handleInterrupt</a><BR>
 <LI><a href="#[149]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[149]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a><BR>
 <LI><a href="#[1ce]">Codec_WrReg</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ce]">Codec_WrReg</a><BR>
 <LI><a href="#[4c9]">toVS</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c9]">toVS</a><BR>
 <LI><a href="#[431]">verifyEnum</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[345]">toTkn</a><BR>
 <LI><a href="#[347]">tokenize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[345]">toTkn</a><BR>
 <LI><a href="#[344]">addGroup</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[345]">toTkn</a><BR>
 <LI><a href="#[41d]">initTknTable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[345]">toTkn</a><BR>
 <LI><a href="#[4ae]">parseLstObj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4ac]">parseValue</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC_IRQHandler</a> from powermanager.o(i.ADC_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[e1]">AbortTransfer</a> from mci_stm32f4xx_1.o(i.AbortTransfer) referenced from mci_stm32f4xx_1.o(.constdata)
 <LI><a href="#[d]">BusFault_Handler</a> from hardfault.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[27]">CAN1_RX0_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[28]">CAN1_RX1_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[29]">CAN1_SCE_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[26]">CAN1_TX_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[50]">CAN2_RX0_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[51]">CAN2_RX1_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[52]">CAN2_SCE_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[4f]">CAN2_TX_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[dc]">CardPower</a> from mci_stm32f4xx_1.o(i.CardPower) referenced from mci_stm32f4xx_1.o(.constdata)
 <LI><a href="#[e2]">Control</a> from mci_stm32f4xx_1.o(i.Control) referenced from mci_stm32f4xx_1.o(.constdata)
 <LI><a href="#[4d]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[4e]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream0_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream1_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream2_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream3_IRQHandler</a> from i2s_stm32f4xx.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream4_IRQHandler</a> from i2s_stm32f4xx.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream5_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream6_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[42]">DMA1_Stream7_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream0_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream1_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream2_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream3_IRQHandler</a> from mci_stm32f4xx_1.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream4_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream5_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream6_IRQHandler</a> from mci_stm32f4xx_1.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream7_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from inputmanager.o(i.EXTI0_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from inputmanager.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from inputmanager.o(i.EXTI1_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from inputmanager.o(i.EXTI3_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from inputmanager.o(i.EXTI4_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from inputmanager.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[60]">FMPI2C1_ER_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[5f]">FMPI2C1_EV_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[d8]">GetCapabilities</a> from mci_stm32f4xx_1.o(i.GetCapabilities) referenced from mci_stm32f4xx_1.o(.constdata)
 <LI><a href="#[e3]">GetStatus</a> from mci_stm32f4xx_1.o(i.GetStatus) referenced from mci_stm32f4xx_1.o(.constdata)
 <LI><a href="#[d7]">GetVersion</a> from mci_stm32f4xx_1.o(i.GetVersion) referenced from mci_stm32f4xx_1.o(.constdata)
 <LI><a href="#[e4]">HAL_RCC_GetPCLK2Freq</a> from stm32f4xx_hal_rcc_1.o(i.HAL_RCC_GetPCLK2Freq) referenced from spi_stm32f4xx_1.o(.constdata)
 <LI><a href="#[b]">HardFault_Handler</a> from hardfault.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[d5]">I2C1_Control</a> from i2c_stm32f4xx_1.o(i.I2C1_Control) referenced from i2c_stm32f4xx_1.o(.constdata)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from i2c_stm32f4xx_1.o(i.I2C1_ER_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from i2c_stm32f4xx_1.o(i.I2C1_EV_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[d4]">I2C1_GetDataCount</a> from i2c_stm32f4xx_1.o(i.I2C1_GetDataCount) referenced from i2c_stm32f4xx_1.o(.constdata)
 <LI><a href="#[d6]">I2C1_GetStatus</a> from i2c_stm32f4xx_1.o(i.I2C1_GetStatus) referenced from i2c_stm32f4xx_1.o(.constdata)
 <LI><a href="#[cd]">I2C1_Initialize</a> from i2c_stm32f4xx_1.o(i.I2C1_Initialize) referenced from i2c_stm32f4xx_1.o(.constdata)
 <LI><a href="#[d1]">I2C1_MasterReceive</a> from i2c_stm32f4xx_1.o(i.I2C1_MasterReceive) referenced from i2c_stm32f4xx_1.o(.constdata)
 <LI><a href="#[d0]">I2C1_MasterTransmit</a> from i2c_stm32f4xx_1.o(i.I2C1_MasterTransmit) referenced from i2c_stm32f4xx_1.o(.constdata)
 <LI><a href="#[cf]">I2C1_PowerControl</a> from i2c_stm32f4xx_1.o(i.I2C1_PowerControl) referenced from i2c_stm32f4xx_1.o(.constdata)
 <LI><a href="#[d3]">I2C1_SlaveReceive</a> from i2c_stm32f4xx_1.o(i.I2C1_SlaveReceive) referenced from i2c_stm32f4xx_1.o(.constdata)
 <LI><a href="#[d2]">I2C1_SlaveTransmit</a> from i2c_stm32f4xx_1.o(i.I2C1_SlaveTransmit) referenced from i2c_stm32f4xx_1.o(.constdata)
 <LI><a href="#[ce]">I2C1_Uninitialize</a> from i2c_stm32f4xx_1.o(i.I2C1_Uninitialize) referenced from i2c_stm32f4xx_1.o(.constdata)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[59]">I2C3_ER_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[58]">I2C3_EV_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[cc]">I2CX_GetCapabilities</a> from i2c_stm32f4xx_1.o(i.I2CX_GetCapabilities) referenced from i2c_stm32f4xx_1.o(.constdata)
 <LI><a href="#[cb]">I2CX_GetVersion</a> from i2c_stm32f4xx_1.o(i.I2CX_GetVersion) referenced from i2c_stm32f4xx_1.o(.constdata)
 <LI><a href="#[aa]">I2S2_Control</a> from i2s_stm32f4xx.o(i.I2S2_Control) referenced from i2s_stm32f4xx.o(.constdata)
 <LI><a href="#[a2]">I2S2_GetCapabilities</a> from i2s_stm32f4xx.o(i.I2S2_GetCapabilities) referenced from i2s_stm32f4xx.o(.constdata)
 <LI><a href="#[a9]">I2S2_GetRxCount</a> from i2s_stm32f4xx.o(i.I2S2_GetRxCount) referenced from i2s_stm32f4xx.o(.constdata)
 <LI><a href="#[ab]">I2S2_GetStatus</a> from i2s_stm32f4xx.o(i.I2S2_GetStatus) referenced from i2s_stm32f4xx.o(.constdata)
 <LI><a href="#[a8]">I2S2_GetTxCount</a> from i2s_stm32f4xx.o(i.I2S2_GetTxCount) referenced from i2s_stm32f4xx.o(.constdata)
 <LI><a href="#[a3]">I2S2_Initialize</a> from i2s_stm32f4xx.o(i.I2S2_Initialize) referenced from i2s_stm32f4xx.o(.constdata)
 <LI><a href="#[a5]">I2S2_PowerControl</a> from i2s_stm32f4xx.o(i.I2S2_PowerControl) referenced from i2s_stm32f4xx.o(.constdata)
 <LI><a href="#[a7]">I2S2_Receive</a> from i2s_stm32f4xx.o(i.I2S2_Receive) referenced from i2s_stm32f4xx.o(.constdata)
 <LI><a href="#[a6]">I2S2_Send</a> from i2s_stm32f4xx.o(i.I2S2_Send) referenced from i2s_stm32f4xx.o(.constdata)
 <LI><a href="#[a4]">I2S2_Uninitialize</a> from i2s_stm32f4xx.o(i.I2S2_Uninitialize) referenced from i2s_stm32f4xx.o(.constdata)
 <LI><a href="#[a1]">I2Sx_GetVersion</a> from i2s_stm32f4xx.o(i.I2Sx_GetVersion) referenced from i2s_stm32f4xx.o(.constdata)
 <LI><a href="#[d9]">Initialize</a> from mci_stm32f4xx_1.o(i.Initialize) referenced from mci_stm32f4xx_1.o(.constdata)
 <LI><a href="#[70]">MC0_MCI_SignalEvent</a> from fs_config.o(i.MC0_MCI_SignalEvent) referenced from fs_config.o(i.fs_config)
 <LI><a href="#[c]">MemManage_Handler</a> from hardfault.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from hardfault.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[53]">OTG_FS_IRQHandler</a> from otg_fs_stm32f4xx_1.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[3d]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[db]">PowerControl</a> from mci_stm32f4xx_1.o(i.PowerControl) referenced from mci_stm32f4xx_1.o(.constdata)
 <LI><a href="#[5e]">QUADSPI_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[5a]">RNG_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[3c]">RTC_Alarm_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[16]">RTC_WKUP_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[6c]">RX_DMA_Complete</a> from mci_stm32f4xx_1.o(i.RX_DMA_Complete) referenced from mci_stm32f4xx_1.o(i.Initialize)
 <LI><a href="#[dd]">ReadCD</a> from mci_stm32f4xx_1.o(i.ReadCD) referenced from mci_stm32f4xx_1.o(.constdata)
 <LI><a href="#[de]">ReadWP</a> from mci_stm32f4xx_1.o(i.ReadWP) referenced from mci_stm32f4xx_1.o(.constdata)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[43]">SDIO_IRQHandler</a> from mci_stm32f4xx_1.o(i.SDIO_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[ee]">SPI1_Control</a> from spi_stm32f4xx_1.o(i.SPI1_Control) referenced from spi_stm32f4xx_1.o(.constdata)
 <LI><a href="#[ed]">SPI1_GetDataCount</a> from spi_stm32f4xx_1.o(i.SPI1_GetDataCount) referenced from spi_stm32f4xx_1.o(.constdata)
 <LI><a href="#[ef]">SPI1_GetStatus</a> from spi_stm32f4xx_1.o(i.SPI1_GetStatus) referenced from spi_stm32f4xx_1.o(.constdata)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from spi_stm32f4xx_1.o(i.SPI1_IRQHandler) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[e7]">SPI1_Initialize</a> from spi_stm32f4xx_1.o(i.SPI1_Initialize) referenced from spi_stm32f4xx_1.o(.constdata)
 <LI><a href="#[e9]">SPI1_PowerControl</a> from spi_stm32f4xx_1.o(i.SPI1_PowerControl) referenced from spi_stm32f4xx_1.o(.constdata)
 <LI><a href="#[eb]">SPI1_Receive</a> from spi_stm32f4xx_1.o(i.SPI1_Receive) referenced from spi_stm32f4xx_1.o(.constdata)
 <LI><a href="#[ea]">SPI1_Send</a> from spi_stm32f4xx_1.o(i.SPI1_Send) referenced from spi_stm32f4xx_1.o(.constdata)
 <LI><a href="#[ec]">SPI1_Transfer</a> from spi_stm32f4xx_1.o(i.SPI1_Transfer) referenced from spi_stm32f4xx_1.o(.constdata)
 <LI><a href="#[e8]">SPI1_Uninitialize</a> from spi_stm32f4xx_1.o(i.SPI1_Uninitialize) referenced from spi_stm32f4xx_1.o(.constdata)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[45]">SPI3_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[5c]">SPI4_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[5d]">SPI5_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[e6]">SPIX_GetCapabilities</a> from spi_stm32f4xx_1.o(i.SPIX_GetCapabilities) referenced from spi_stm32f4xx_1.o(.constdata)
 <LI><a href="#[e5]">SPIX_GetVersion</a> from spi_stm32f4xx_1.o(i.SPIX_GetVersion) referenced from spi_stm32f4xx_1.o(.constdata)
 <LI><a href="#[f]">SVC_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[df]">SendCommand</a> from mci_stm32f4xx_1.o(i.SendCommand) referenced from mci_stm32f4xx_1.o(.constdata)
 <LI><a href="#[e0]">SetupTransfer</a> from mci_stm32f4xx_1.o(i.SetupTransfer) referenced from mci_stm32f4xx_1.o(.constdata)
 <LI><a href="#[12]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from rtx_kernel.o(i.svcRtxKernelStart)
 <LI><a href="#[61]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f412vx.o(.text)
 <LI><a href="#[15]">TAMP_STAMP_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[44]">TIM5_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[46]">TIM6_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[47]">TIM7_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[57]">USART6_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[b2]">USBD0_SignalDeviceEvent</a> from usbd_config_0.o(i.USBD0_SignalDeviceEvent) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[b3]">USBD0_SignalEndpointEvent</a> from usbd_config_0.o(i.USBD0_SignalEndpointEvent) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[6d]">USBD_Core_Thread</a> from usbd_lib_core.o(i.USBD_Core_Thread) referenced from usbd_config_0.o(i.USBD_ThreadCreate)
 <LI><a href="#[c4]">USBD_Device0_ConfigurationChanged</a> from usbd_user_device_msc_lun.o(i.USBD_Device0_ConfigurationChanged) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[c6]">USBD_Device0_DisableRemoteWakeup</a> from usbd_user_device_msc_lun.o(i.USBD_Device0_DisableRemoteWakeup) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[c5]">USBD_Device0_EnableRemoteWakeup</a> from usbd_user_device_msc_lun.o(i.USBD_Device0_EnableRemoteWakeup) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[ca]">USBD_Device0_Endpoint0_InDataSent</a> from usbd_user_device_msc_lun.o(i.USBD_Device0_Endpoint0_InDataSent) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[c9]">USBD_Device0_Endpoint0_OutDataReceived</a> from usbd_user_device_msc_lun.o(i.USBD_Device0_Endpoint0_OutDataReceived) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[c8]">USBD_Device0_Endpoint0_SetupPacketProcessed</a> from usbd_user_device_msc_lun.o(i.USBD_Device0_Endpoint0_SetupPacketProcessed) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[c7]">USBD_Device0_Endpoint0_SetupPacketReceived</a> from usbd_user_device_msc_lun.o(i.USBD_Device0_Endpoint0_SetupPacketReceived) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[c1]">USBD_Device0_HighSpeedActivated</a> from usbd_user_device_msc_lun.o(i.USBD_Device0_HighSpeedActivated) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[bd]">USBD_Device0_Initialize</a> from usbd_user_device_msc_lun.o(i.USBD_Device0_Initialize) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[c0]">USBD_Device0_Reset</a> from usbd_user_device_msc_lun.o(i.USBD_Device0_Reset) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[c3]">USBD_Device0_Resumed</a> from usbd_user_device_msc_lun.o(i.USBD_Device0_Resumed) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[c2]">USBD_Device0_Suspended</a> from usbd_user_device_msc_lun.o(i.USBD_Device0_Suspended) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[be]">USBD_Device0_Uninitialize</a> from usbd_user_device_msc_lun.o(i.USBD_Device0_Uninitialize) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[bf]">USBD_Device0_VbusChanged</a> from usbd_user_device_msc_lun.o(i.USBD_Device0_VbusChanged) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[f5]">USBD_DeviceConnect</a> from usbd_fs_stm32f4xx_1.o(i.USBD_DeviceConnect) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[f6]">USBD_DeviceDisconnect</a> from usbd_fs_stm32f4xx_1.o(i.USBD_DeviceDisconnect) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[f7]">USBD_DeviceGetState</a> from usbd_fs_stm32f4xx_1.o(i.USBD_DeviceGetState) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[f8]">USBD_DeviceRemoteWakeup</a> from usbd_fs_stm32f4xx_1.o(i.USBD_DeviceRemoteWakeup) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[f9]">USBD_DeviceSetAddress</a> from usbd_fs_stm32f4xx_1.o(i.USBD_DeviceSetAddress) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[fb]">USBD_EndpointConfigure</a> from usbd_fs_stm32f4xx_1.o(i.USBD_EndpointConfigure) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[fd]">USBD_EndpointStall</a> from usbd_fs_stm32f4xx_1.o(i.USBD_EndpointStall) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[fe]">USBD_EndpointTransfer</a> from usbd_fs_stm32f4xx_1.o(i.USBD_EndpointTransfer) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[100]">USBD_EndpointTransferAbort</a> from usbd_fs_stm32f4xx_1.o(i.USBD_EndpointTransferAbort) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[ff]">USBD_EndpointTransferGetResult</a> from usbd_fs_stm32f4xx_1.o(i.USBD_EndpointTransferGetResult) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[fc]">USBD_EndpointUnconfigure</a> from usbd_fs_stm32f4xx_1.o(i.USBD_EndpointUnconfigure) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[f1]">USBD_GetCapabilities</a> from usbd_fs_stm32f4xx_1.o(i.USBD_GetCapabilities) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[101]">USBD_GetFrameNumber</a> from usbd_fs_stm32f4xx_1.o(i.USBD_GetFrameNumber) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[f0]">USBD_GetVersion</a> from usbd_fs_stm32f4xx_1.o(i.USBD_GetVersion) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[f2]">USBD_Initialize</a> from usbd_fs_stm32f4xx_1.o(i.USBD_Initialize) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[b6]">USBD_MSC0_GetCacheInfo</a> from usbd_user_device_msc_lun.o(i.USBD_MSC0_GetCacheInfo) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[b7]">USBD_MSC0_GetMaxLUN</a> from usbd_user_device_msc_lun.o(i.USBD_MSC0_GetMaxLUN) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[b4]">USBD_MSC0_Initialize</a> from usbd_user_device_msc_lun.o(i.USBD_MSC0_Initialize) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[bc]">USBD_MSC0_LUN_CheckMedia</a> from usbd_user_device_msc_lun.o(i.USBD_MSC0_LUN_CheckMedia) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[b8]">USBD_MSC0_LUN_GetMediaCapacity</a> from usbd_user_device_msc_lun.o(i.USBD_MSC0_LUN_GetMediaCapacity) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[b9]">USBD_MSC0_LUN_Read</a> from usbd_user_device_msc_lun.o(i.USBD_MSC0_LUN_Read) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[bb]">USBD_MSC0_LUN_StartStop</a> from usbd_config_0.o(i.USBD_MSC0_LUN_StartStop) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[ba]">USBD_MSC0_LUN_Write</a> from usbd_user_device_msc_lun.o(i.USBD_MSC0_LUN_Write) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[b5]">USBD_MSC0_Uninitialize</a> from usbd_user_device_msc_lun.o(i.USBD_MSC0_Uninitialize) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[6e]">USBD_MSC_Thread</a> from usbd_lib_msc.o(i.USBD_MSC_Thread) referenced from usbd_config_0.o(i.USBD_ThreadCreate)
 <LI><a href="#[f4]">USBD_PowerControl</a> from usbd_fs_stm32f4xx_1.o(i.USBD_PowerControl) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[fa]">USBD_ReadSetupPacket</a> from usbd_fs_stm32f4xx_1.o(i.USBD_ReadSetupPacket) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[f3]">USBD_Uninitialize</a> from usbd_fs_stm32f4xx_1.o(i.USBD_Uninitialize) referenced from usbd_fs_stm32f4xx_1.o(.constdata)
 <LI><a href="#[da]">Uninitialize</a> from mci_stm32f4xx_1.o(i.Uninitialize) referenced from mci_stm32f4xx_1.o(.constdata)
 <LI><a href="#[e]">UsageFault_Handler</a> from hardfault.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32f412vx.o(.text) referenced from startup_stm32f412vx.o(RESET)
 <LI><a href="#[6a]">___backspace$unlocked</a> from backspace.o(.text) referenced from scanf_char_file_locked.o(.text)
 <LI><a href="#[102]">__main</a> from __main.o(!!!main) referenced from startup_stm32f412vx.o(.text)
 <LI><a href="#[69]">_fgetc$unlocked</a> from fgetc.o(i.fgetc) referenced from scanf_char_file_locked.o(.text)
 <LI><a href="#[68]">_fputc$unlocked</a> from fputc.o(i.fputc) referenced from _printf_char_file_locked.o(.text)
 <LI><a href="#[63]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[65]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[66]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[64]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[74]">checkPowerTimer</a> from powermanager.o(i.checkPowerTimer) referenced from powermanager.o(i.initPowerMgr)
 <LI><a href="#[6b]">i2c_Sig_Event</a> from ak4xxx.o(i.i2c_Sig_Event) referenced from ak4xxx.o(i.I2C_initialize)
 <LI><a href="#[71]">inputThread</a> from inputmanager.o(i.inputThread) referenced from inputmanager.o(i.initInputManager)
 <LI><a href="#[67]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[72]">ledThread</a> from ledmanager.o(i.ledThread) referenced from ledmanager.o(i.initLedManager)
 <LI><a href="#[b1]">mc0_DevCtrl</a> from fs_config.o(i.mc0_DevCtrl) referenced from fs_config.o(.constdata)
 <LI><a href="#[ac]">mc0_Init</a> from fs_config.o(i.mc0_Init) referenced from fs_config.o(.constdata)
 <LI><a href="#[b0]">mc0_RdInfo</a> from fs_config.o(i.mc0_RdInfo) referenced from fs_config.o(.constdata)
 <LI><a href="#[ae]">mc0_RdSect</a> from fs_config.o(i.mc0_RdSect) referenced from fs_config.o(.constdata)
 <LI><a href="#[ad]">mc0_UnInit</a> from fs_config.o(i.mc0_UnInit) referenced from fs_config.o(.constdata)
 <LI><a href="#[af]">mc0_WrSect</a> from fs_config.o(i.mc0_WrSect) referenced from fs_config.o(.constdata)
 <LI><a href="#[73]">mediaThread</a> from mediaplayer.o(i.mediaThread) referenced from mediaplayer.o(i.initMediaPlayer)
 <LI><a href="#[9b]">osRtxEventFlagsPostProcess</a> from rtx_evflags.o(i.osRtxEventFlagsPostProcess) referenced from rtx_evflags.o(i.svcRtxEventFlagsNew)
 <LI><a href="#[8c]">osRtxIdleThread</a> from rtx_config.o(i.osRtxIdleThread) referenced from rtx_thread.o(i.osRtxThreadStartup)
 <LI><a href="#[9c]">osRtxMemoryPoolPostProcess</a> from rtx_mempool.o(i.osRtxMemoryPoolPostProcess) referenced from rtx_mempool.o(i.svcRtxMemoryPoolNew)
 <LI><a href="#[9d]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(i.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(i.svcRtxMessageQueueNew)
 <LI><a href="#[9e]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(i.osRtxSemaphorePostProcess) referenced from rtx_semaphore.o(i.svcRtxSemaphoreNew)
 <LI><a href="#[a0]">osRtxThreadPostProcess</a> from rtx_thread.o(i.osRtxThreadPostProcess) referenced from rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[8d]">osRtxTimerThread</a> from rtx_timer.o(i.osRtxTimerThread) referenced from rtx_thread.o(i.osRtxThreadStartup)
 <LI><a href="#[8e]">osRtxTimerTick</a> from rtx_timer.o(i.osRtxTimerTick) referenced from rtx_timer.o(i.osRtxTimerThread)
 <LI><a href="#[9f]">osThreadExit</a> from rtx_thread.o(i.osThreadExit) referenced from rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[75]">powerThreadProc</a> from powermanager.o(i.powerThreadProc) referenced from powermanager.o(i.initPowerMgr)
 <LI><a href="#[6f]">saiEvent</a> from audio.o(i.saiEvent) referenced from audio.o(i.audInitialize)
 <LI><a href="#[77]">svcRtxDelay</a> from rtx_delay.o(i.svcRtxDelay) referenced from rtx_delay.o(i.osDelay)
 <LI><a href="#[78]">svcRtxEventFlagsNew</a> from rtx_evflags.o(i.svcRtxEventFlagsNew) referenced from rtx_evflags.o(i.osEventFlagsNew)
 <LI><a href="#[79]">svcRtxEventFlagsSet</a> from rtx_evflags.o(i.svcRtxEventFlagsSet) referenced from rtx_evflags.o(i.osEventFlagsSet)
 <LI><a href="#[7a]">svcRtxEventFlagsWait</a> from rtx_evflags.o(i.svcRtxEventFlagsWait) referenced from rtx_evflags.o(i.osEventFlagsWait)
 <LI><a href="#[7b]">svcRtxKernelGetState</a> from rtx_kernel.o(i.svcRtxKernelGetState) referenced from rtx_kernel.o(i.osKernelGetState)
 <LI><a href="#[7c]">svcRtxKernelGetSysTimerCount</a> from rtx_kernel.o(i.svcRtxKernelGetSysTimerCount) referenced from rtx_kernel.o(i.osKernelGetSysTimerCount)
 <LI><a href="#[7d]">svcRtxKernelGetSysTimerFreq</a> from rtx_kernel.o(i.svcRtxKernelGetSysTimerFreq) referenced from rtx_kernel.o(i.osKernelGetSysTimerFreq)
 <LI><a href="#[7e]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(i.svcRtxKernelGetTickCount) referenced from rtx_kernel.o(i.osKernelGetTickCount)
 <LI><a href="#[7f]">svcRtxKernelGetTickFreq</a> from rtx_kernel.o(i.svcRtxKernelGetTickFreq) referenced from rtx_kernel.o(i.osKernelGetTickFreq)
 <LI><a href="#[80]">svcRtxKernelInitialize</a> from rtx_kernel.o(i.svcRtxKernelInitialize) referenced from rtx_kernel.o(i.osKernelInitialize)
 <LI><a href="#[81]">svcRtxKernelStart</a> from rtx_kernel.o(i.svcRtxKernelStart) referenced from rtx_kernel.o(i.osKernelStart)
 <LI><a href="#[82]">svcRtxMemoryPoolAlloc</a> from rtx_mempool.o(i.svcRtxMemoryPoolAlloc) referenced from rtx_mempool.o(i.osMemoryPoolAlloc)
 <LI><a href="#[83]">svcRtxMemoryPoolFree</a> from rtx_mempool.o(i.svcRtxMemoryPoolFree) referenced from rtx_mempool.o(i.osMemoryPoolFree)
 <LI><a href="#[84]">svcRtxMemoryPoolNew</a> from rtx_mempool.o(i.svcRtxMemoryPoolNew) referenced from rtx_mempool.o(i.osMemoryPoolNew)
 <LI><a href="#[85]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(i.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(i.osMessageQueueGet)
 <LI><a href="#[86]">svcRtxMessageQueueNew</a> from rtx_msgqueue.o(i.svcRtxMessageQueueNew) referenced from rtx_msgqueue.o(i.osMessageQueueNew)
 <LI><a href="#[87]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(i.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(i.osMessageQueuePut)
 <LI><a href="#[88]">svcRtxMutexAcquire</a> from rtx_mutex.o(i.svcRtxMutexAcquire) referenced from rtx_mutex.o(i.osMutexAcquire)
 <LI><a href="#[89]">svcRtxMutexDelete</a> from rtx_mutex.o(i.svcRtxMutexDelete) referenced from rtx_mutex.o(i.osMutexDelete)
 <LI><a href="#[8a]">svcRtxMutexNew</a> from rtx_mutex.o(i.svcRtxMutexNew) referenced from rtx_mutex.o(i.osMutexNew)
 <LI><a href="#[8b]">svcRtxMutexRelease</a> from rtx_mutex.o(i.svcRtxMutexRelease) referenced from rtx_mutex.o(i.osMutexRelease)
 <LI><a href="#[8f]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(i.svcRtxSemaphoreAcquire) referenced from rtx_semaphore.o(i.osSemaphoreAcquire)
 <LI><a href="#[90]">svcRtxSemaphoreDelete</a> from rtx_semaphore.o(i.svcRtxSemaphoreDelete) referenced from rtx_semaphore.o(i.osSemaphoreDelete)
 <LI><a href="#[91]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(i.svcRtxSemaphoreNew) referenced from rtx_semaphore.o(i.osSemaphoreNew)
 <LI><a href="#[92]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(i.svcRtxSemaphoreRelease) referenced from rtx_semaphore.o(i.osSemaphoreRelease)
 <LI><a href="#[93]">svcRtxThreadExit</a> from rtx_thread.o(i.svcRtxThreadExit) referenced from rtx_thread.o(i.osThreadExit)
 <LI><a href="#[94]">svcRtxThreadFlagsSet</a> from rtx_thread.o(i.svcRtxThreadFlagsSet) referenced from rtx_thread.o(i.osThreadFlagsSet)
 <LI><a href="#[95]">svcRtxThreadFlagsWait</a> from rtx_thread.o(i.svcRtxThreadFlagsWait) referenced from rtx_thread.o(i.osThreadFlagsWait)
 <LI><a href="#[96]">svcRtxThreadGetId</a> from rtx_thread.o(i.svcRtxThreadGetId) referenced from rtx_thread.o(i.osThreadGetId)
 <LI><a href="#[97]">svcRtxThreadNew</a> from rtx_thread.o(i.svcRtxThreadNew) referenced from rtx_thread.o(i.osThreadNew)
 <LI><a href="#[98]">svcRtxThreadTerminate</a> from rtx_thread.o(i.svcRtxThreadTerminate) referenced from rtx_thread.o(i.osThreadTerminate)
 <LI><a href="#[99]">svcRtxTimerNew</a> from rtx_timer.o(i.svcRtxTimerNew) referenced from rtx_timer.o(i.osTimerNew)
 <LI><a href="#[9a]">svcRtxTimerStart</a> from rtx_timer.o(i.svcRtxTimerStart) referenced from rtx_timer.o(i.osTimerStart)
 <LI><a href="#[76]">talking_book</a> from tbook.o(i.talking_book) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[102]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[107]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[109]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4ca]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4cb]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4cc]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[4cd]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[4ce]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[10a]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[16c]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[10c]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[10e]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[110]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[111]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[112]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[4cf]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[114]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[116]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[117]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[118]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[11a]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[11c]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[11e]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[11f]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[120]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[122]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[4d0]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[124]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[126]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[128]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[12a]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[4d1]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[140]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[12c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[12e]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4d2]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[4d3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[130]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[4d4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[4d5]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4d6]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[132]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[4d7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[4d8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[133]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[4d9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[4da]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[4db]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[4dc]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[4dd]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[4de]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[4df]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[135]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[4e0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[4e1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[4e2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[4e3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[4e4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[4e5]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[145]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[4e6]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[137]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[4e7]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[139]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_heap_2 &rArr; _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[4e8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[4e9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[4ea]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[4eb]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[4ec]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[108]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[4ed]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[13b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[13d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; osRtxKernelPreInit &rArr; evr_initialize &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[13f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[141]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; talking_book &rArr; initControlManager &rArr; readControlDef &rArr; parseFile &rArr; parseValue &rArr; parseLstObj &rArr;  parseValue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4ee]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1bd]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[144]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[4ef]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[146]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4f0]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[1df]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsSet
</UL>

<P><STRONG><a name="[4f1]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>

<P><STRONG><a name="[1dd]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>

<P><STRONG><a name="[4f2]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[4f3]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[4f4]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[4f5]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[4f6]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[4f7]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[4f8]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[148]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_link_put
</UL>

<P><STRONG><a name="[4f9]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[4fa]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[4fb]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[4fc]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[4fd]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[48b]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[4fe]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[4ff]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[48c]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[500]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[501]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[48a]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[149]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
</UL>

<P><STRONG><a name="[275]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[502]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[503]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[504]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[505]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[277]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>

<P><STRONG><a name="[506]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[507]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[508]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[274]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[509]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[50a]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[14a]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_put
</UL>

<P><STRONG><a name="[50b]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[50c]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[50d]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[50e]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[50f]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[510]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[292]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
</UL>

<P><STRONG><a name="[511]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[512]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[513]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[290]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>

<P><STRONG><a name="[514]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[14b]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put
</UL>

<P><STRONG><a name="[515]"></a>__asm___12_rtx_system_c_024f2f18__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[516]"></a>__asm___12_rtx_system_c_024f2f18__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[517]"></a>__asm___12_rtx_system_c_024f2f18__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[518]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[519]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[51a]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[43e]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>

<P><STRONG><a name="[43c]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[51b]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[51c]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[43b]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[51d]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[14c]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>

<P><STRONG><a name="[51e]"></a>__asm___12_rtx_thread_c_add96be5__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[298]"></a>__asm___12_rtx_thread_c_add96be5__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsSet
</UL>

<P><STRONG><a name="[51f]"></a>__asm___12_rtx_thread_c_add96be5__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[295]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[296]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[520]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[521]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[522]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[523]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[524]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[525]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[526]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[14d]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>

<P><STRONG><a name="[234]"></a>__asm___15_EventRecorder_c_e8d3082c__atomic_inc8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
</UL>

<P><STRONG><a name="[1e3]"></a>__asm___15_EventRecorder_c_e8d3082c__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[1e2]"></a>__asm___15_EventRecorder_c_e8d3082c__atomic_xch32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[1ea]"></a>__asm___15_EventRecorder_c_e8d3082c__LockRecord</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[1eb]"></a>__asm___15_EventRecorder_c_e8d3082c__UnlockRecord</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hardfault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = BusFault_Handler &rArr; HardFault_Handler_C &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hardfault.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hardfault.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hardfault.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hardfault.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[527]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, maybetermalloc2.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_stm32f412vx.o(RESET)
<LI> rtx_kernel.o(i.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>FMPI2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>FMPI2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f412vx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[1b4]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f412vx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[151]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertSeq
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logMsgName
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[528]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[529]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[157]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbAlloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[318]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsWait
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[52a]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashFn
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[15a]"></a>vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errLog
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrLog
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
</UL>

<P><STRONG><a name="[15c]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printAudSt
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errLog
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLedManager
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPrintf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mediaThread
</UL>

<P><STRONG><a name="[15d]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtS
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
</UL>

<P><STRONG><a name="[15e]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledSig
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNS
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRTC
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIDs
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtS
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statFNm
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVS
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLstObj
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logMsgName
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNI
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSig
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPower
</UL>

<P><STRONG><a name="[161]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[162]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[163]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[164]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[160]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[115]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[166]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[168]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[119]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[121]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[169]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[11b]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[123]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[10d]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[16a]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[16d]"></a>__0fscanf</STRONG> (Thumb, 24 bytes, Stack size 56 bytes, __0fscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __0fscanf &rArr; __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
</UL>

<P><STRONG><a name="[16f]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1b6]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[171]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gDef
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIntFld
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getField
</UL>

<P><STRONG><a name="[173]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
</UL>

<P><STRONG><a name="[52b]"></a>_fseek$unlocked</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[52c]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[17d]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fclose_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyFile
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveStats
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseFile
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readContent
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerDown
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStats
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadBuff
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audRecordComplete
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlaybackComplete
</UL>

<P><STRONG><a name="[17e]"></a>fseek</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fseek_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = fseek &rArr; _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWavPos
</UL>

<P><STRONG><a name="[17f]"></a>ferror</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ferror_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ferror &rArr; _mutex_release &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadBuff
</UL>

<P><STRONG><a name="[180]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[181]"></a>$Super$$fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[184]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[185]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayWave
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyFile
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mediaThread
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveStats
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseFile
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readContent
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStats
</UL>

<P><STRONG><a name="[386]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gDef
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTkn
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenize
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
</UL>

<P><STRONG><a name="[34a]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTBHistory
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addHist
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenize
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toTkn
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocStr
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recordAudio
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playAudio
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addLUN
</UL>

<P><STRONG><a name="[186]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[187]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strcasecmp &rArr; tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSubjAudio
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toTkn
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendIf
</UL>

<P><STRONG><a name="[445]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logMsgName
</UL>

<P><STRONG><a name="[27d]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledSig
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbShw
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gDef
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvtS
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashLED
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayWave
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLstObj
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catIf
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVStr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toTkn
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathCat
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendIf
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocStr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPath
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlayAudio
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addLUN
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[384]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLstObj
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catIf
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPath
</UL>

<P><STRONG><a name="[1ba]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[188]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[52d]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledSig
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRTC
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audStartRecording
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[52e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[52f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[530]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Inquiry
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLogger
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStats
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_Init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audInitState
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Reset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RequestSense
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetCore
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[18c]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[18b]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseValue
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLstObj
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseFile
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audInitState
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Reset
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Initialize
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadCreate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerControl
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointUnconfigure
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointConfigure
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[531]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[532]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[18e]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStats
</UL>

<P><STRONG><a name="[342]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addGroup
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlayAudio
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[533]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[534]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[158]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[131]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[535]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[536]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[192]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[12f]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[194]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _free_internal &rArr; _mutex_release &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[17b]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[165]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[10b]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[15f]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[64]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[196]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[125]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[127]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[197]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[129]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[12b]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[11d]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[170]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[172]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[175]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[537]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[19a]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[179]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[19d]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[167]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[191]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[198]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[538]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1a6]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[1a7]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>

<P><STRONG><a name="[199]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[539]"></a>___backspace$unlocked$orig</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, backspace.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>___backspace$unlocked</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, backspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ___backspace$unlocked
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ungetc_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[1aa]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[1ae]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[1ac]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[1b9]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>

<P><STRONG><a name="[53a]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[1bc]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>

<P><STRONG><a name="[53b]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[138]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[193]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[53c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[53d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[53e]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[13a]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, term_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_heap_2
</UL>

<P><STRONG><a name="[67]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1a5]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[15b]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, _printf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>

<P><STRONG><a name="[1a8]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[16e]"></a>__vfscanf_char_file</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, scanf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fscanf
</UL>

<P><STRONG><a name="[19f]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a9]"></a>_ungetc_internal</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ungetc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___backspace$unlocked
</UL>

<P><STRONG><a name="[53f]"></a>ungetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ungetc.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>fgets</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fgets_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fgets &rArr; _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTkn
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readContent
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
</UL>

<P><STRONG><a name="[1b1]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1b8]"></a>fread</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, freadfast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayWave
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyFile
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStats
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadBuff
</UL>

<P><STRONG><a name="[1bb]"></a>fwrite</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, fwritefast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyFile
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveStats
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveBuff
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audStartRecording
</UL>

<P><STRONG><a name="[1ad]"></a>_flushlinebuffered</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, flushlinebuffered_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[143]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1b3]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1b0]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1b2]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[147]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[1b5]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, h1_final_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[1bf]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[1be]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[1c0]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1a0]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c2]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1c1]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1c3]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1c4]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1a1]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a2]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c5]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1c6]"></a>fflush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fs_config.o(i.$Sub$$fflush))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtS
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerDown
</UL>

<P><STRONG><a name="[25]"></a>ADC_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, powermanager.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ADC_IRQHandler &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[1cb]"></a>Codec_RdReg</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ak4xxx.o(i.Codec_RdReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Codec_RdReg &rArr; dbgLog &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntErr
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_CheckRegs
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WrReg
</UL>

<P><STRONG><a name="[1ce]"></a>Codec_WrReg</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ak4xxx.o(i.Codec_WrReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errLog
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntErr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Reinit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WrReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_RdReg
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akUpd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WrReg
</UL>

<P><STRONG><a name="[21]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, i2s_stm32f4xx.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; I2S_RX_DMA_Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RX_DMA_Complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, i2s_stm32f4xx.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; I2S_TX_DMA_Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TX_DMA_Complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mci_stm32f4xx_1.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mci_stm32f4xx_1.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, inputmanager.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = EXTI0_IRQHandler &rArr; handleInterrupt &rArr; updateKeyState &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, inputmanager.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = EXTI15_10_IRQHandler &rArr; handleInterrupt &rArr; updateKeyState &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, inputmanager.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = EXTI1_IRQHandler &rArr; handleInterrupt &rArr; updateKeyState &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, inputmanager.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = EXTI3_IRQHandler &rArr; handleInterrupt &rArr; updateKeyState &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, inputmanager.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = EXTI4_IRQHandler &rArr; handleInterrupt &rArr; updateKeyState &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, inputmanager.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = EXTI9_5_IRQHandler &rArr; handleInterrupt &rArr; updateKeyState &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[1e4]"></a>EventRecord2</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, eventrecorder.o(i.EventRecord2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_UnInit
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadSector
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadInfo
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funmount
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_unlock
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_read_info
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_lock
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_get_id
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_get_cache
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Disconnect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalEndpointEvent
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalDeviceEvent
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Uninitialize
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Reset
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Initialize
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickFreq
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetSysTimerFreq
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetSysTimerCount
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_NotAllowed
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_DriveIdInvalid
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_read
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_InvalidParameter
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_FormatOptionDetected
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_FileHandleInvalid
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetMaxLUN
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_BulkOnlyMassStorageReset
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadFormatCapacity
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_WriteDone
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_TestUnitReady
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_StartStopUnit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_RequestSense
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_ReadFormatCapacities
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_ReadDone
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_ReadCapacity
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_OnWriteFailed
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_OnCheckMedia
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_ModeSense
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_MediaRemoval
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_Inquiry
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_Driver_EndpointUnconfigureFailed
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_Driver_EndpointTransferFailed
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_Driver_EndpointTransferAbort
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_Driver_EndpointStallFailed
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_Driver_EndpointConfigureFailed
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverUninitialize
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverReadSetupPacket
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverPowerControl
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverInitialize
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceSetAddress
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceDisconnect
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceConnect
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketReceived
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketProcessed
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_OutDataReceived
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_InDataSent
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigureEndpoint0
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_Core_ConfigureEp0Failed
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_update_sw_state
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_sleep
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_unmount
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>

<P><STRONG><a name="[1e7]"></a>EventRecord4</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, eventrecorder.o(i.EventRecord4))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEVR
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadSector
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_write_sector
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_read_sector
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_get_cache
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_device_ctrl
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorWriteFailed
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorReadFailed
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_NameCacheEntryInsert
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_Write
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_Read
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_OnWrite
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_OnGetMediaCapacity
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverReadSetupPacket
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketReceived
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketProcessed
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_WriteXferSetupError
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_ReadXferSetupError
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[1e9]"></a>EventRecordData</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, eventrecorder.o(i.EventRecordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvtS
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvtD
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_PathName
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[2b5]"></a>EventRecorderDisable</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, eventrecorder.o(i.EventRecorderDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EventRecorderDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initControlManager
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMount
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config_evr
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Debug_Initialize
</UL>

<P><STRONG><a name="[1f0]"></a>EventRecorderEnable</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, eventrecorder.o(i.EventRecorderEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EventRecorderEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initControlManager
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config_evr
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Debug_Initialize
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evr_initialize
</UL>

<P><STRONG><a name="[1ec]"></a>EventRecorderInitialize</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, eventrecorder.o(i.EventRecorderInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerSetup
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetFreq
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evr_initialize
</UL>

<P><STRONG><a name="[1f1]"></a>EventRecorderStart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, eventrecorder.o(i.EventRecorderStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[1e1]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eventrecorder.o(i.EventRecorderTimerGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[1ef]"></a>EventRecorderTimerGetFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eventrecorder.o(i.EventRecorderTimerGetFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[1ee]"></a>EventRecorderTimerSetup</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eventrecorder.o(i.EventRecorderTimerSetup))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[1fe]"></a>EvrRtxKernelError</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelError))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[1ff]"></a>EvrRtxKernelGetSysTimerCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelGetSysTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelGetSysTimerCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[200]"></a>EvrRtxKernelGetSysTimerFreq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelGetSysTimerFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerFreq
</UL>

<P><STRONG><a name="[201]"></a>EvrRtxKernelGetTickCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickCount
</UL>

<P><STRONG><a name="[202]"></a>EvrRtxKernelGetTickFreq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickFreq
</UL>

<P><STRONG><a name="[203]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelInitialize &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[204]"></a>EvrRtxKernelInitialized</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelInitialized))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelInitialized &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[205]"></a>EvrRtxKernelStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelStart &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[206]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelStarted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[207]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[208]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMemoryBlockAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[209]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryBlockFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[20a]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryBlockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[20b]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[20c]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[20d]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxThreadBlocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadBlocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[20e]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxThreadCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[20f]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadDestroyed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[210]"></a>EvrRtxThreadError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxThreadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[211]"></a>EvrRtxThreadExit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadExit &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[212]"></a>EvrRtxThreadGetId</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadGetId &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
</UL>

<P><STRONG><a name="[213]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadJoined &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[214]"></a>EvrRtxThreadNew</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[215]"></a>EvrRtxThreadPreempted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadPreempted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[216]"></a>EvrRtxThreadSwitched</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadSwitched))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[217]"></a>EvrRtxThreadTerminate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadTerminate &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[218]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxThreadUnblocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadUnblocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[40f]"></a>GPIO_AFConfigure</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gpio_stm32f4xx.o(i.GPIO_AFConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gUnconfig
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigOut
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigIn
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigADC
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigI2S
</UL>

<P><STRONG><a name="[22f]"></a>GPIO_DefineSignals</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tbutil.o(i.GPIO_DefineSignals))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = GPIO_DefineSignals &rArr; gDef &rArr; atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gDef
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[232]"></a>GPIO_GetPortClockState</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, gpio_stm32f4xx.o(i.GPIO_GetPortClockState))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
</UL>

<P><STRONG><a name="[231]"></a>GPIO_PinConfigure</STRONG> (Thumb, 126 bytes, Stack size 36 bytes, gpio_stm32f4xx.o(i.GPIO_PinConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPortClockState
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gUnconfig
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigOut
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigIn
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigADC
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigI2S
</UL>

<P><STRONG><a name="[233]"></a>GPIO_PortClock</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, gpio_stm32f4xx.o(i.GPIO_PortClock))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configInputKey
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_DMA_Abort</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32f4xx_hal_dma_1.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HAL_DMA_Abort &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ER_IRQHandler
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AbortTransfer
</UL>

<P><STRONG><a name="[236]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_dma_1.o(i.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f4xx_hal_dma_1.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[238]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f4xx_hal_dma_1.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HAL_DMA_Init &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[23a]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f4xx_hal_dma_1.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupTransfer
</UL>

<P><STRONG><a name="[23c]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal_1.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HAL_Delay &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerControl
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeviceRemoteWakeup
</UL>

<P><STRONG><a name="[255]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 304 bytes, Stack size 20 bytes, stm32f4xx_hal_gpio_1.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Uninitialize
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsUnconfigure
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uninitialize
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_GPIO_Init</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio_1.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsConfigure
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[24f]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio_1.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>

<P><STRONG><a name="[24e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio_1.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>

<P><STRONG><a name="[235]"></a>HAL_GetTick</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tbutil.o(i.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex_1.o(i.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[253]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex_1.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[254]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex_1.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[23f]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc_1.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[23e]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc_1.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>

<P><STRONG><a name="[e4]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc_1.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>HardFault_Handler_C</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, tbutil.o(i.HardFault_Handler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler_C &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printAudSt
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableLCD
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f4xx_1.o(i.I2C1_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = I2C1_ER_IRQHandler &rArr; I2C_ER_IRQHandler &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f4xx_1.o(i.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C1_EV_IRQHandler &rArr; I2C_EV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[250]"></a>I2C_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ak4xxx.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = I2C_Init &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_initialize
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WrReg
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_Init
</UL>

<P><STRONG><a name="[1d1]"></a>I2C_Reinit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ak4xxx.o(i.I2C_Reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I2C_Reinit &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbDelay_ms
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WrReg
</UL>

<P><STRONG><a name="[251]"></a>I2C_initialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ak4xxx.o(i.I2C_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Reinit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[1d3]"></a>I2S_RX_DMA_Complete</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, i2s_stm32f4xx.o(i.I2S_RX_DMA_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2S_RX_DMA_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[1d4]"></a>I2S_TX_DMA_Complete</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, i2s_stm32f4xx.o(i.I2S_TX_DMA_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2S_TX_DMA_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
</UL>

<P><STRONG><a name="[430]"></a>InitLCD</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tbutil.o(i.InitLCD))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPrintf
</UL>

<P><STRONG><a name="[4bc]"></a>LCDwriteln</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tbutil.o(i.LCDwriteln))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>

<P><STRONG><a name="[270]"></a>LED_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ledmanager.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LED_Init &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbDelay_ms
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigOut
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashInit
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePowerEvent
</UL>

<P><STRONG><a name="[4a1]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[4c4]"></a>OS_Tick_Enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[4c1]"></a>OS_Tick_GetClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetClock))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerFreq
</UL>

<P><STRONG><a name="[4be]"></a>OS_Tick_GetCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetCount))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[4c3]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[4c0]"></a>OS_Tick_GetInterval</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetInterval))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[4bf]"></a>OS_Tick_GetOverflow</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetOverflow))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[4c2]"></a>OS_Tick_Setup</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os_systick.o(i.OS_Tick_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Tick_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[53]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, otg_fs_stm32f4xx_1.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBD_FS_IRQ &rArr; USBD_ReadFromFifo &rArr; dbgEVR &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[279]"></a>OTG_FS_PinsConfigure</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, otg_fs_stm32f4xx_1.o(i.OTG_FS_PinsConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OTG_FS_PinsConfigure &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[27b]"></a>OTG_FS_PinsUnconfigure</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, otg_fs_stm32f4xx_1.o(i.OTG_FS_PinsUnconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OTG_FS_PinsUnconfigure &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
</UL>

<P><STRONG><a name="[27c]"></a>PlayWave</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, audio.o(i.PlayWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = PlayWave &rArr; startPlayback &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errLog
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvtD
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startPlayback
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audInitState
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlayAudio
</UL>

<P><STRONG><a name="[3bb]"></a>RebootToDFU</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tbutil.o(i.RebootToDFU))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeInterrupts
</UL>

<P><STRONG><a name="[38c]"></a>RngChar</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, powermanager.o(i.RngChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RngChar
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPower
</UL>

<P><STRONG><a name="[43]"></a>SDIO_IRQHandler</STRONG> (Thumb, 638 bytes, Stack size 24 bytes, mci_stm32f4xx_1.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx_1.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI1_IRQHandler &rArr; SPI_IRQHandler &rArr; SPI_RxData
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SystemInit</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SystemInit &rArr; readPVD &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPVD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f412vx.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>USBD0_SignalDeviceEvent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_config_0.o(i.USBD0_SignalDeviceEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = USBD0_SignalDeviceEvent &rArr; USBD_SignalDeviceEvent &rArr; USBD_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalDeviceEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>USBD0_SignalEndpointEvent</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_config_0.o(i.USBD0_SignalEndpointEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = USBD0_SignalEndpointEvent &rArr; USBD_SignalEndpointEvent &rArr; USBD_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalEndpointEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[29b]"></a>USBD_ClassInitialize</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usbd_config_0.o(i.USBD_ClassInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = USBD_ClassInitialize &rArr; USBD_MSC_Initialize &rArr; USBD_ThreadCreate &rArr; osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[29d]"></a>USBD_ClassUninitialize</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usbd_config_0.o(i.USBD_ClassUninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_ClassUninitialize &rArr; USBD_MSC_Uninitialize &rArr; USBD_ThreadTerminate &rArr; osThreadTerminate &rArr; EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Uninitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[2a9]"></a>USBD_Class_Endpoint0_InDataSent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Class_Endpoint0_InDataSent))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_InDataSent
</UL>

<P><STRONG><a name="[2ab]"></a>USBD_Class_Endpoint0_OutDataReceived</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Class_Endpoint0_OutDataReceived))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_OutDataReceived
</UL>

<P><STRONG><a name="[2ad]"></a>USBD_Class_Endpoint0_SetupPacketProcessed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Class_Endpoint0_SetupPacketProcessed))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketProcessed
</UL>

<P><STRONG><a name="[2af]"></a>USBD_Class_Endpoint0_SetupPacketReceived</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Class_Endpoint0_SetupPacketReceived))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketReceived
</UL>

<P><STRONG><a name="[2a1]"></a>USBD_Connect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_lib_core.o(i.USBD_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = USBD_Connect &rArr; USBD_DriverDeviceConnect &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceConnect
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CheckDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableMassStorage
</UL>

<P><STRONG><a name="[2a8]"></a>USBD_Core_Endpoint0_InDataSent</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_lib_core_device.o(i.USBD_Core_Endpoint0_InDataSent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_Core_Endpoint0_InDataSent &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Class_Endpoint0_InDataSent
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2aa]"></a>USBD_Core_Endpoint0_OutDataReceived</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_lib_core_device.o(i.USBD_Core_Endpoint0_OutDataReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_Core_Endpoint0_OutDataReceived &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Class_Endpoint0_OutDataReceived
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2ac]"></a>USBD_Core_Endpoint0_SetupPacketProcessed</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_lib_core_device.o(i.USBD_Core_Endpoint0_SetupPacketProcessed))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_Core_Endpoint0_SetupPacketProcessed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Class_Endpoint0_SetupPacketProcessed
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2ae]"></a>USBD_Core_Endpoint0_SetupPacketReceived</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbd_lib_core_device.o(i.USBD_Core_Endpoint0_SetupPacketReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_Core_Endpoint0_SetupPacketReceived &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Class_Endpoint0_SetupPacketReceived
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6d]"></a>USBD_Core_Thread</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, usbd_lib_core.o(i.USBD_Core_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = USBD_Core_Thread &rArr; USBD_Core &rArr; USBD_Endpoint0 &rArr; USBD_ReqSetInterface &rArr; USBD_EndpointStart &rArr; USBD_MSC_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsWait
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(i.USBD_ThreadCreate)
</UL>
<P><STRONG><a name="[2b1]"></a>USBD_DataInStage</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbd_lib_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = USBD_DataInStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_MSC_ReqToIF
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2b3]"></a>USBD_DataOutStage</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_lib_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = USBD_DataOutStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2b4]"></a>USBD_Debug_Initialize</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usb_debug.o(i.USBD_Debug_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_Debug_Initialize &rArr; EventRecorderEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[2b6]"></a>USBD_Delay</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_config_0.o(i.USBD_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_Delay &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverUninitialize
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverReadSetupPacket
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverPowerControl
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverInitialize
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceSetAddress
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceDisconnect
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceConnect
</UL>

<P><STRONG><a name="[c4]"></a>USBD_Device0_ConfigurationChanged</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_user_device_msc_lun.o(i.USBD_Device0_ConfigurationChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_Device0_ConfigurationChanged &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>USBD_Device0_DisableRemoteWakeup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_user_device_msc_lun.o(i.USBD_Device0_DisableRemoteWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_Device0_DisableRemoteWakeup &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>USBD_Device0_EnableRemoteWakeup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_user_device_msc_lun.o(i.USBD_Device0_EnableRemoteWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_Device0_EnableRemoteWakeup &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>USBD_Device0_Endpoint0_InDataSent</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_user_device_msc_lun.o(i.USBD_Device0_Endpoint0_InDataSent))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_Device0_Endpoint0_InDataSent &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>USBD_Device0_Endpoint0_OutDataReceived</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_user_device_msc_lun.o(i.USBD_Device0_Endpoint0_OutDataReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_Device0_Endpoint0_OutDataReceived &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>USBD_Device0_Endpoint0_SetupPacketProcessed</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_user_device_msc_lun.o(i.USBD_Device0_Endpoint0_SetupPacketProcessed))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_Device0_Endpoint0_SetupPacketProcessed &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>USBD_Device0_Endpoint0_SetupPacketReceived</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, usbd_user_device_msc_lun.o(i.USBD_Device0_Endpoint0_SetupPacketReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_Device0_Endpoint0_SetupPacketReceived &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>USBD_Device0_HighSpeedActivated</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_user_device_msc_lun.o(i.USBD_Device0_HighSpeedActivated))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_Device0_HighSpeedActivated &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>USBD_Device0_Initialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_user_device_msc_lun.o(i.USBD_Device0_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_Device0_Initialize &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>USBD_Device0_Reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_user_device_msc_lun.o(i.USBD_Device0_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_Device0_Reset &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>USBD_Device0_Resumed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_user_device_msc_lun.o(i.USBD_Device0_Resumed))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_Device0_Resumed &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>USBD_Device0_Suspended</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_user_device_msc_lun.o(i.USBD_Device0_Suspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_Device0_Suspended &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>USBD_Device0_Uninitialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_user_device_msc_lun.o(i.USBD_Device0_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_Device0_Uninitialize &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>USBD_Device0_VbusChanged</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_user_device_msc_lun.o(i.USBD_Device0_VbusChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_Device0_VbusChanged &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[2ba]"></a>USBD_Disconnect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_lib_core.o(i.USBD_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = USBD_Disconnect &rArr; USBD_DriverDeviceDisconnect &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceDisconnect
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CheckDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableMassStorage
</UL>

<P><STRONG><a name="[2a3]"></a>USBD_DriverDeviceConnect</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, usbd_lib_drv.o(i.USBD_DriverDeviceConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = USBD_DriverDeviceConnect &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
</UL>

<P><STRONG><a name="[2bb]"></a>USBD_DriverDeviceDisconnect</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, usbd_lib_drv.o(i.USBD_DriverDeviceDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = USBD_DriverDeviceDisconnect &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Disconnect
</UL>

<P><STRONG><a name="[2be]"></a>USBD_DriverDeviceSetAddress</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, usbd_lib_drv.o(i.USBD_DriverDeviceSetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = USBD_DriverDeviceSetAddress &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2a0]"></a>USBD_DriverEndpointConfigure</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = USBD_DriverEndpointConfigure &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_Driver_EndpointConfigureFailed
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigureEndpoint0
</UL>

<P><STRONG><a name="[2c0]"></a>USBD_DriverEndpointStall</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = USBD_DriverEndpointStall &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_Driver_EndpointStallFailed
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2b2]"></a>USBD_DriverEndpointTransfer</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_Driver_EndpointTransferFailed
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EndpointStart
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EndpointClearFeatureStall
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EpBulkIn
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStage
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[2bf]"></a>USBD_DriverEndpointTransferAbort</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointTransferAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_Driver_EndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Reset
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStageDone
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[2c1]"></a>USBD_DriverEndpointTransferGetResult</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointTransferGetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = USBD_DriverEndpointTransferGetResult &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Thread
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStageDone
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStageDone
</UL>

<P><STRONG><a name="[2c2]"></a>USBD_DriverEndpointUnconfigure</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointUnconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = USBD_DriverEndpointUnconfigure &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_Driver_EndpointUnconfigureFailed
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[2e7]"></a>USBD_DriverGetCapabilities</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_lib_drv.o(i.USBD_DriverGetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[2e6]"></a>USBD_DriverGetVersion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_lib_drv.o(i.USBD_DriverGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[2c3]"></a>USBD_DriverInitialize</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, usbd_lib_drv.o(i.USBD_DriverInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = USBD_DriverInitialize &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[2c4]"></a>USBD_DriverPowerControl</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, usbd_lib_drv.o(i.USBD_DriverPowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = USBD_DriverPowerControl &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[2c5]"></a>USBD_DriverReadSetupPacket</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, usbd_lib_drv.o(i.USBD_DriverReadSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = USBD_DriverReadSetupPacket &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2c6]"></a>USBD_DriverUninitialize</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, usbd_lib_drv.o(i.USBD_DriverUninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = USBD_DriverUninitialize &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
</UL>

<P><STRONG><a name="[2da]"></a>USBD_Endpoint0_ClearFeatureStall_MSC</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usbd_lib_core_msc.o(i.USBD_Endpoint0_ClearFeatureStall_MSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = USBD_Endpoint0_ClearFeatureStall_MSC &rArr; USBD_MSC_EndpointClearFeatureStall &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EndpointClearFeatureStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[2cd]"></a>USBD_Endpoint0_Out_ADC_ReqToEP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_Out_ADC_ReqToEP))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2cb]"></a>USBD_Endpoint0_Out_ADC_ReqToIF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_Out_ADC_ReqToIF))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2cc]"></a>USBD_Endpoint0_Out_CDC_ReqToIF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_Out_CDC_ReqToIF))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2ca]"></a>USBD_Endpoint0_Out_HID_ReqToIF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_Out_HID_ReqToIF))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[30c]"></a>USBD_Endpoint0_ReqGetDescriptor_HID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_ReqGetDescriptor_HID))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor
</UL>

<P><STRONG><a name="[30d]"></a>USBD_Endpoint0_ReqGetExtProp_CC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_ReqGetExtProp_CC))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetMSDescriptor
</UL>

<P><STRONG><a name="[2d8]"></a>USBD_Endpoint0_Setup_ADC_ReqToEP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_Setup_ADC_ReqToEP))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2d6]"></a>USBD_Endpoint0_Setup_ADC_ReqToIF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_Setup_ADC_ReqToIF))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2d7]"></a>USBD_Endpoint0_Setup_CDC_ReqToIF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_Setup_CDC_ReqToIF))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2d4]"></a>USBD_Endpoint0_Setup_HID_ReqToIF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_Setup_HID_ReqToIF))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2d5]"></a>USBD_Endpoint0_Setup_MSC_ReqToIF</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, usbd_lib_core_msc.o(i.USBD_Endpoint0_Setup_MSC_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = USBD_Endpoint0_Setup_MSC_ReqToIF &rArr; USBD_DataInStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetMaxLUN
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_BulkOnlyMassStorageReset
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStage
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2e0]"></a>USBD_EndpointStart</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_config_0.o(i.USBD_EndpointStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = USBD_EndpointStart &rArr; USBD_MSC_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EndpointStart
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[30e]"></a>USBD_EndpointStop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_EndpointStop))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[278]"></a>USBD_FS_IRQ</STRONG> (Thumb, 1676 bytes, Stack size 56 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_FS_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = USBD_FS_IRQ &rArr; USBD_ReadFromFifo &rArr; dbgEVR &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEVR
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteToFifo
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadFromFifo
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetFrameNumber
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FlushInEpFifo
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointReadSet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeviceSetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[2e5]"></a>USBD_Initialize</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, usbd_lib_core.o(i.USBD_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = USBD_Initialize &rArr; USBD_ClassInitialize &rArr; USBD_MSC_Initialize &rArr; USBD_ThreadCreate &rArr; osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Debug_Initialize
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadTerminate
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadCreate
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreDelete
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreCreate
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClassUninitialize
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClassInitialize
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverPowerControl
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverInitialize
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverGetVersion
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverGetCapabilities
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CheckDevice
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableMassStorage
</UL>

<P><STRONG><a name="[b6]"></a>USBD_MSC0_GetCacheInfo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_user_device_msc_lun.o(i.USBD_MSC0_GetCacheInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBD_MSC0_GetCacheInfo &rArr; getCacheInfoLUN &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCacheInfoLUN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>USBD_MSC0_GetMaxLUN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_user_device_msc_lun.o(i.USBD_MSC0_GetMaxLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_MSC0_GetMaxLUN &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>USBD_MSC0_Initialize</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbd_user_device_msc_lun.o(i.USBD_MSC0_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = USBD_MSC0_Initialize &rArr; initLUN &rArr; funmount &rArr; fat_unmount &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLUN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>USBD_MSC0_LUN_CheckMedia</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usbd_user_device_msc_lun.o(i.USBD_MSC0_LUN_CheckMedia))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_MSC0_LUN_CheckMedia &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_device_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>USBD_MSC0_LUN_GetMediaCapacity</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, usbd_user_device_msc_lun.o(i.USBD_MSC0_LUN_GetMediaCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_MSC0_LUN_GetMediaCapacity &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_read_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>USBD_MSC0_LUN_Read</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, usbd_user_device_msc_lun.o(i.USBD_MSC0_LUN_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_MSC0_LUN_Read &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_read_sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>USBD_MSC0_LUN_StartStop</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, usbd_config_0.o(i.USBD_MSC0_LUN_StartStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_MSC0_LUN_StartStop
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_StartStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>USBD_MSC0_LUN_Write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, usbd_user_device_msc_lun.o(i.USBD_MSC0_LUN_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_MSC0_LUN_Write &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_write_sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[2f1]"></a>USBD_MSC0_StartStop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_MSC0_StartStop))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_LUN_StartStop
</UL>

<P><STRONG><a name="[b5]"></a>USBD_MSC0_Uninitialize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbd_user_device_msc_lun.o(i.USBD_MSC0_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = USBD_MSC0_Uninitialize &rArr; uninitLUN &rArr; fmount &rArr; fat_mount &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninitLUN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[2dc]"></a>USBD_MSC_BulkOnlyMassStorageReset</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, usbd_lib_msc.o(i.USBD_MSC_BulkOnlyMassStorageReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_MSC_BulkOnlyMassStorageReset &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_MSC_ReqToIF
</UL>

<P><STRONG><a name="[2db]"></a>USBD_MSC_EndpointClearFeatureStall</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_lib_msc.o(i.USBD_MSC_EndpointClearFeatureStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_EndpointClearFeatureStall &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckInstance
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_ClearFeatureStall_MSC
</UL>

<P><STRONG><a name="[2e1]"></a>USBD_MSC_EndpointStart</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_lib_msc.o(i.USBD_MSC_EndpointStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckInstance
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStart
</UL>

<P><STRONG><a name="[2dd]"></a>USBD_MSC_GetMaxLUN</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, usbd_lib_msc.o(i.USBD_MSC_GetMaxLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_MSC_GetMaxLUN &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_MSC_ReqToIF
</UL>

<P><STRONG><a name="[29c]"></a>USBD_MSC_Initialize</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, usbd_lib_msc.o(i.USBD_MSC_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USBD_MSC_Initialize &rArr; USBD_ThreadCreate &rArr; osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadCreate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckInstance
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClassInitialize
</UL>

<P><STRONG><a name="[30b]"></a>USBD_MSC_Reset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, usbd_lib_msc.o(i.USBD_MSC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_Reset &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckInstance
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[6e]"></a>USBD_MSC_Thread</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, usbd_lib_msc.o(i.USBD_MSC_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_Thread &rArr; USBD_MSC_GetCBW &rArr; USBD_MSC_MemoryRead &rArr; USBD_MSC_CheckMediaHW &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsWait
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusPhaseError
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EpBulkIn
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckInstance
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(i.USBD_ThreadCreate)
</UL>
<P><STRONG><a name="[29e]"></a>USBD_MSC_Uninitialize</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, usbd_lib_msc.o(i.USBD_MSC_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_MSC_Uninitialize &rArr; USBD_ThreadTerminate &rArr; osThreadTerminate &rArr; EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadTerminate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClassUninitialize
</UL>

<P><STRONG><a name="[2a6]"></a>USBD_Reset</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbd_config_0.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = USBD_Reset &rArr; USBD_MSC_Reset &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
</UL>

<P><STRONG><a name="[2bc]"></a>USBD_SemaphoreAcquire</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbd_config_0.o(i.USBD_SemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_SemaphoreAcquire &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverUninitialize
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverReadSetupPacket
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverPowerControl
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverInitialize
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceSetAddress
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceDisconnect
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceConnect
</UL>

<P><STRONG><a name="[2e8]"></a>USBD_SemaphoreCreate</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, usbd_config_0.o(i.USBD_SemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_SemaphoreCreate &rArr; osSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[2eb]"></a>USBD_SemaphoreDelete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_config_0.o(i.USBD_SemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_SemaphoreDelete &rArr; osSemaphoreDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[2bd]"></a>USBD_SemaphoreRelease</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_config_0.o(i.USBD_SemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverUninitialize
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverReadSetupPacket
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverPowerControl
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverInitialize
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceSetAddress
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceDisconnect
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceConnect
</UL>

<P><STRONG><a name="[30f]"></a>USBD_SetConfiguration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_SetConfiguration))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[299]"></a>USBD_SignalDeviceEvent</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_lib_drv.o(i.USBD_SignalDeviceEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = USBD_SignalDeviceEvent &rArr; USBD_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsSet
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD0_SignalDeviceEvent
</UL>

<P><STRONG><a name="[29a]"></a>USBD_SignalEndpointEvent</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usbd_lib_drv.o(i.USBD_SignalEndpointEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = USBD_SignalEndpointEvent &rArr; USBD_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsSet
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD0_SignalEndpointEvent
</UL>

<P><STRONG><a name="[2c9]"></a>USBD_StatusInStage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_core.o(i.USBD_StatusInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = USBD_StatusInStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_MSC_ReqToIF
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2c8]"></a>USBD_StatusInStageDone</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_lib_core.o(i.USBD_StatusInStageDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = USBD_StatusInStageDone &rArr; USBD_DriverEndpointTransferGetResult &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2c7]"></a>USBD_StatusOutStage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_core.o(i.USBD_StatusOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = USBD_StatusOutStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_MSC_ReqToIF
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2ce]"></a>USBD_StatusOutStageDone</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_lib_core.o(i.USBD_StatusOutStageDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = USBD_StatusOutStageDone &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2e9]"></a>USBD_ThreadCreate</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, usbd_config_0.o(i.USBD_ThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBD_ThreadCreate &rArr; osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Initialize
</UL>

<P><STRONG><a name="[314]"></a>USBD_ThreadFlagsSet</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_config_0.o(i.USBD_ThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = USBD_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalEndpointEvent
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalDeviceEvent
</UL>

<P><STRONG><a name="[2b0]"></a>USBD_ThreadFlagsWait</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, usbd_config_0.o(i.USBD_ThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_ThreadFlagsWait &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Thread
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Thread
</UL>

<P><STRONG><a name="[2ea]"></a>USBD_ThreadTerminate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_config_0.o(i.USBD_ThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_ThreadTerminate &rArr; osThreadTerminate &rArr; EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Uninitialize
</UL>

<P><STRONG><a name="[31a]"></a>USBD_Uninitialize</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, usbd_lib_core.o(i.USBD_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = USBD_Uninitialize &rArr; USBD_DriverEndpointUnconfigure &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadTerminate
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreDelete
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStop
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClassUninitialize
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverUninitialize
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverPowerControl
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CheckDevice
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableMassStorage
</UL>

<P><STRONG><a name="[1a4]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[321]"></a>__sys_close</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __sys_close &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_close
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[1c7]"></a>__sys_ensure</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_ensure))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __sys_ensure &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_flush
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[328]"></a>__sys_flen</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __sys_flen &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_flen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flen
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[32b]"></a>__sys_open</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, fs_sys.o(i.__sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_open
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_handle_get
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[331]"></a>__sys_read</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_read
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[334]"></a>__sys_seek</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __sys_seek &rArr; fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_seek
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[337]"></a>__sys_write</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_write
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[153]"></a>__user_perthread_libspace</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtx_lib.o(i.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[16b]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[103]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_acquire &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[104]"></a>_mutex_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_free &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[105]"></a>_mutex_initialize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_lib.o(i._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _mutex_initialize &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[106]"></a>_mutex_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_release &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[13e]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtx_lib.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; osRtxKernelPreInit &rArr; evr_initialize &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[17a]"></a>_sys_close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, retarget_io.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = _sys_close &rArr; __sys_close &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[176]"></a>_sys_flen</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, retarget_io.o(i._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = _sys_flen &rArr; __sys_flen &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[174]"></a>_sys_istty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[183]"></a>_sys_open</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, retarget_io.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[1ab]"></a>_sys_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, retarget_io.o(i._sys_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[19b]"></a>_sys_seek</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, retarget_io.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = _sys_seek &rArr; __sys_seek &rArr; fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[19c]"></a>_sys_write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, retarget_io.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[266]"></a>abortRCV</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, i2s_stm32f4xx.o(i.abortRCV))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = abortRCV
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Control
</UL>

<P><STRONG><a name="[265]"></a>abortTXMT</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, i2s_stm32f4xx.o(i.abortTXMT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = abortTXMT
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Control
</UL>

<P><STRONG><a name="[34b]"></a>addLUN</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbd_user_device_msc_lun.o(i.addLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = addLUN &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableMassStorage
</UL>

<P><STRONG><a name="[34c]"></a>adjPlayPosition</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mediaplayer.o(i.adjPlayPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = adjPlayPosition &rArr; audAdjPlayPos &rArr; audPauseResumeAudio &rArr; setWavPos &rArr; audPlaybackComplete &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audAdjPlayPos
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
</UL>

<P><STRONG><a name="[34e]"></a>adjVolume</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mediaplayer.o(i.adjVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = adjVolume &rArr; ak_SetVolume &rArr; akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetVolume
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlayPct
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
</UL>

<P><STRONG><a name="[351]"></a>akUpd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ak4xxx.o(i.akUpd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WrReg
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetVolume
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SpeakerEnable
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetMasterFreq
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetMute
</UL>

<P><STRONG><a name="[352]"></a>ak_CheckRegs</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ak4xxx.o(i.ak_CheckRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ak_CheckRegs &rArr; Codec_RdReg &rArr; dbgLog &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntErr
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_ReportErrors
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_RdReg
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_Init
</UL>

<P><STRONG><a name="[26c]"></a>ak_Init</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, ak4xxx.o(i.ak_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ak_Init &rArr; ak_SetVolume &rArr; akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetVolume
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_PowerUp
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_CheckRegs
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akUpd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetMute
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_PowerControl
</UL>

<P><STRONG><a name="[26b]"></a>ak_PowerDown</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ak4xxx.o(i.ak_PowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ak_PowerDown &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSet
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_PowerControl
</UL>

<P><STRONG><a name="[354]"></a>ak_PowerUp</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ak4xxx.o(i.ak_PowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ak_PowerUp &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbDelay_ms
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_Init
</UL>

<P><STRONG><a name="[353]"></a>ak_ReportErrors</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ak4xxx.o(i.ak_ReportErrors))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ak_ReportErrors &rArr; dbgLog &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_CheckRegs
</UL>

<P><STRONG><a name="[264]"></a>ak_SetMasterFreq</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, ak4xxx.o(i.ak_SetMasterFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ak_SetMasterFreq &rArr; akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbDelay_ms
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akUpd
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Configure
</UL>

<P><STRONG><a name="[261]"></a>ak_SetMute</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ak4xxx.o(i.ak_SetMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ak_SetMute &rArr; akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akUpd
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_Init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startPlayback
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPauseResumeAudio
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2only_Send
</UL>

<P><STRONG><a name="[34f]"></a>ak_SetVolume</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, ak4xxx.o(i.ak_SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ak_SetVolume &rArr; akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audGetState
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akUpd
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjVolume
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_Init
</UL>

<P><STRONG><a name="[260]"></a>ak_SpeakerEnable</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, ak4xxx.o(i.ak_SpeakerEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ak_SpeakerEnable &rArr; akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbDelay_ms
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSet
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akUpd
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2only_Send
</UL>

<P><STRONG><a name="[356]"></a>allocBuff</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, audio.o(i.allocBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = allocBuff &rArr; errLog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errLog
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saiEvent
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startRecord
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadBuff
</UL>

<P><STRONG><a name="[365]"></a>asAction</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tkntable.o(i.asAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = asAction &rArr; tknVal &rArr; asTkn
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknVal
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknGrp
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
</UL>

<P><STRONG><a name="[367]"></a>asEvent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tkntable.o(i.asEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = asEvent &rArr; tknVal &rArr; asTkn
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknVal
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknGrp
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCGrp
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
</UL>

<P><STRONG><a name="[368]"></a>asGroup</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tkntable.o(i.asGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = asGroup &rArr; tknGrp
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknGrp
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstID
</UL>

<P><STRONG><a name="[369]"></a>asPunct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tkntable.o(i.asPunct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = asPunct &rArr; tknGrp
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknGrp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseValue
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseName
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLstObj
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTkn
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readContent
</UL>

<P><STRONG><a name="[3a8]"></a>asShade</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, ledmanager.o(i.asShade))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = asShade
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertSeq
</UL>

<P><STRONG><a name="[34d]"></a>audAdjPlayPos</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, audio.o(i.audAdjPlayPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = audAdjPlayPos &rArr; audPauseResumeAudio &rArr; setWavPos &rArr; audPlaybackComplete &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWavPos
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPauseResumeAudio
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjPlayPosition
</UL>

<P><STRONG><a name="[355]"></a>audGetState</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, audio.o(i.audGetState))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recordAudio
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playAudio
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatus
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetVolume
</UL>

<P><STRONG><a name="[27f]"></a>audInitState</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, audio.o(i.audInitState))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = audInitState &rArr; tbAlloc &rArr; errLog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbAlloc
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayWave
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audStartRecording
</UL>

<P><STRONG><a name="[370]"></a>audInitialize</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, audio.o(i.audInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = audInitialize &rArr; initBuffs &rArr; tbAlloc &rArr; errLog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbAlloc
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBuffs
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMediaPlayer
</UL>

<P><STRONG><a name="[372]"></a>audLoadBuffs</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, audio.o(i.audLoadBuffs))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = audLoadBuffs &rArr; loadBuff &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mediaThread
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startPlayback
</UL>

<P><STRONG><a name="[36e]"></a>audPauseResumeAudio</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, audio.o(i.audPauseResumeAudio))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = audPauseResumeAudio &rArr; setWavPos &rArr; audPlaybackComplete &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetMute
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startPlayback
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWavPos
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pauseResume
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audAdjPlayPos
</UL>

<P><STRONG><a name="[375]"></a>audPlayAudio</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, audio.o(i.audPlayAudio))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = audPlayAudio &rArr; PlayWave &rArr; startPlayback &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayWave
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mediaThread
</UL>

<P><STRONG><a name="[350]"></a>audPlayPct</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, audio.o(i.audPlayPct))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = audPlayPct &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjVolume
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playPosition
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audStopAudio
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlaybackComplete
</UL>

<P><STRONG><a name="[376]"></a>audPlaybackComplete</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, audio.o(i.audPlaybackComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = audPlaybackComplete &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEvent
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFg
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeBuffs
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlayPct
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mediaThread
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWavPos
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audStopAudio
</UL>

<P><STRONG><a name="[379]"></a>audRecordComplete</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, audio.o(i.audRecordComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = audRecordComplete &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFg
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeBuffs
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audSaveBuffs
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saiEvent
</UL>

<P><STRONG><a name="[37a]"></a>audSaveBuffs</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, audio.o(i.audSaveBuffs))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = audSaveBuffs &rArr; saveBuff &rArr; fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mediaThread
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audRecordComplete
</UL>

<P><STRONG><a name="[3bd]"></a>audSquareWav</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, audio.o(i.audSquareWav))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = audSquareWav
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
</UL>

<P><STRONG><a name="[37c]"></a>audStartRecording</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, audio.o(i.audStartRecording))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = audStartRecording &rArr; startRecord &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errLog
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startRecord
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audInitState
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mediaThread
</UL>

<P><STRONG><a name="[37e]"></a>audStopAudio</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, audio.o(i.audStopAudio))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = audStopAudio &rArr; audPlaybackComplete &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlaybackComplete
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlayPct
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recordAudio
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playAudio
</UL>

<P><STRONG><a name="[4bd]"></a>audStopRecording</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, audio.o(i.audStopRecording))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopRecording
</UL>

<P><STRONG><a name="[383]"></a>buildPath</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, controlparser.o(i.buildPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = buildPath &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathCat
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendIf
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startRecAudio
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSysAudio
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSubjAudio
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadPath
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readContent
</UL>

<P><STRONG><a name="[389]"></a>checkPower</STRONG> (Thumb, 662 bytes, Stack size 160 bytes, powermanager.o(i.checkPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = checkPower &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNS
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gGet
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEvent
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readADC
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPowerChange
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RngChar
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableADC
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerThreadProc
</UL>

<P><STRONG><a name="[38e]"></a>checkPowerChange</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, powermanager.o(i.checkPowerChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = checkPowerChange &rArr; dbgLog &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPower
</UL>

<P><STRONG><a name="[74]"></a>checkPowerTimer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powermanager.o(i.checkPowerTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = checkPowerTimer &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powermanager.o(i.initPowerMgr)
</UL>
<P><STRONG><a name="[38f]"></a>chkPwrState</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, controlmanager.o(i.chkPwrState))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = chkPwrState &rArr; gOutVal
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gOutVal
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgTgl
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSig
</UL>

<P><STRONG><a name="[1cc]"></a>cntErr</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ak4xxx.o(i.cntErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cntErr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Sig_Event
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_CheckRegs
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WrReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_RdReg
</UL>

<P><STRONG><a name="[394]"></a>configInputKey</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, inputmanager.o(i.configInputKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = configInputKey &rArr; gConfigKey &rArr; gConfigIn &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigKey
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeInterrupts
</UL>

<P><STRONG><a name="[3a7]"></a>convertSeq</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ledmanager.o(i.convertSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = convertSeq &rArr; asShade
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seqAddShade
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asShade
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFg
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBg
</UL>

<P><STRONG><a name="[3aa]"></a>copyFile</STRONG> (Thumb, 106 bytes, Stack size 536 bytes, tbook.o(i.copyFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = copyFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
</UL>

<P><STRONG><a name="[2b9]"></a>dbgEVR</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, tbutil.o(i.dbgEVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dbgEVR &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadSetupPacket
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadFromFifo
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerControl
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointTransferGetResult
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointTransferAbort
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointTransfer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStall
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointReadSet
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointConfigure
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeviceSetAddress
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeviceConnect
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
</UL>

<P><STRONG><a name="[1cf]"></a>dbgEvt</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, tbutil.o(i.dbgEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventTest
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbAlloc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saiEvent
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableMassStorage
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableMassStorage
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjVolume
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjPlayPosition
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mediaThread
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateKeyState
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startKeypadTest
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypadTestKey
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputThread
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInterrupt
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInputs
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEvent
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetVolume
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SpeakerEnable
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_PowerDown
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WrReg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetMute
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startRecord
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startPlayback
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWavPos
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadBuff
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audRecordComplete
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audStartRecording
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlaybackComplete
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPauseResumeAudio
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_PowerControl
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Initialize
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Control
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2only_Send
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2only_Receive
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninitLUN
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLUN
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCacheInfoLUN
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_Uninitialize
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_LUN_Write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_LUN_Read
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_LUN_GetMediaCapacity
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_LUN_CheckMedia
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_Initialize
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_GetMaxLUN
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_VbusChanged
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_Uninitialize
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_Suspended
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_Resumed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_Reset
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_Initialize
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_HighSpeedActivated
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_Endpoint0_SetupPacketReceived
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_Endpoint0_SetupPacketProcessed
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_Endpoint0_OutDataReceived
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_Endpoint0_InDataSent
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_EnableRemoteWakeup
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_DisableRemoteWakeup
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_ConfigurationChanged
</UL>

<P><STRONG><a name="[27e]"></a>dbgEvtD</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tbutil.o(i.dbgEvtD))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dbgEvtD &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayWave
</UL>

<P><STRONG><a name="[3b4]"></a>dbgEvtS</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tbutil.o(i.dbgEvtS))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dbgEvtS &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
</UL>

<P><STRONG><a name="[3b5]"></a>dbgLED</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, controlmanager.o(i.dbgLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = dbgLED &rArr; ledSig &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledSig
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
</UL>

<P><STRONG><a name="[1cd]"></a>dbgLog</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tbutil.o(i.dbgLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dbgLog &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTxtColor
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableLCD
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableLCD
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLED
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventTest
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRTC
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saiEvent
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerMgr
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLogger
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initInputManager
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjVolume
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMount
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtS
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startKeypadTest
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypadTestKey
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInputs
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showTknTable
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseFile
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetVolume
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSig
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_ReportErrors
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WrReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_RdReg
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audRecordComplete
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPowerChange
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPower
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audStopAudio
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlaybackComplete
</UL>

<P><STRONG><a name="[3b9]"></a>dbgTgl</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, controlmanager.o(i.dbgTgl))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dbgTgl &rArr; showSig &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkPwrState
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSet
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSig
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
</UL>

<P><STRONG><a name="[3ba]"></a>debugLoop</STRONG> (Thumb, 644 bytes, Stack size 64 bytes, tbook.o(i.debugLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = debugLoop &rArr; adjPlayPosition &rArr; audAdjPlayPos &rArr; audPauseResumeAudio &rArr; setWavPos &rArr; audPlaybackComplete &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saiEvent
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pauseResume
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isMassStorageEnabled
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSet
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableMassStorage
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableMassStorage
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audSquareWav
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audGetState
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjVolume
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjPlayPosition
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootToDFU
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayWave
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fexists
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gGet
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
</UL>

<P><STRONG><a name="[418]"></a>disableInputs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, inputmanager.o(i.disableInputs))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInterrupt
</UL>

<P><STRONG><a name="[3b8]"></a>disableLCD</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tbutil.o(i.disableLCD))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errLog
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrLog
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
</UL>

<P><STRONG><a name="[31f]"></a>disableMassStorage</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_user_device_msc_lun.o(i.disableMassStorage))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = disableMassStorage &rArr; USBD_Uninitialize &rArr; USBD_DriverEndpointUnconfigure &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Disconnect
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninitLUN
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBmode
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
</UL>

<P><STRONG><a name="[324]"></a>efs_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_close))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[3e3]"></a>efs_ffind</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_ffind))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[32a]"></a>efs_flen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.efs_flen))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[327]"></a>efs_flush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_flush))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[3e7]"></a>efs_format</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_format))
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
</UL>

<P><STRONG><a name="[32f]"></a>efs_handle_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.efs_handle_get))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[3e9]"></a>efs_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_init))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[3ef]"></a>efs_mount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_mount))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[330]"></a>efs_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_open))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[333]"></a>efs_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_read))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[336]"></a>efs_seek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_seek))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[40d]"></a>efs_unmount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_unmount))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funmount
</UL>

<P><STRONG><a name="[339]"></a>efs_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.efs_write))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[3d2]"></a>elink_cmd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.elink_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[4b3]"></a>elink_dir</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.elink_dir))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3d6]"></a>elink_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.elink_init))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[3f9]"></a>elink_insert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.elink_insert))
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[3fc]"></a>elink_scan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.elink_scan))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
</UL>

<P><STRONG><a name="[3c2]"></a>enableInputs</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, inputmanager.o(i.enableInputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = enableInputs &rArr;  handleInterrupt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gGet
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInterrupt
</UL>

<P><STRONG><a name="[240]"></a>enableLCD</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tbutil.o(i.enableLCD))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errLog
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrLog
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
</UL>

<P><STRONG><a name="[31e]"></a>enableMassStorage</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, usbd_user_device_msc_lun.o(i.enableMassStorage))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = enableMassStorage &rArr; USBD_Initialize &rArr; USBD_ClassInitialize &rArr; USBD_MSC_Initialize &rArr; USBD_ThreadCreate &rArr; osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addLUN
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBmode
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
</UL>

<P><STRONG><a name="[3c0]"></a>enableSleep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powermanager.o(i.enableSleep))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
</UL>

<P><STRONG><a name="[4b5]"></a>enableStandby</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, powermanager.o(i.enableStandby))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerThreadProc
</UL>

<P><STRONG><a name="[1d0]"></a>errLog</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, tbutil.o(i.errLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = errLog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTxtColor
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableLCD
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableLCD
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbAlloc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayWave
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WrReg
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocBuff
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audStartRecording
</UL>

<P><STRONG><a name="[39a]"></a>eventNm</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tkntable.o(i.eventNm))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eventNm &rArr; tknStr &rArr; asTkn
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknStr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventTest
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
</UL>

<P><STRONG><a name="[323]"></a>fat_close</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, fs_fat.o(i.fat_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_FileHandleInvalid
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_unmount
</UL>

<P><STRONG><a name="[3c6]"></a>fat_ffind</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, fs_fat.o(i.fat_ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_time
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_date
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_InvalidParameter
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[329]"></a>fat_flen</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_fat.o(i.fat_flen))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[326]"></a>fat_flush</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, fs_fat.o(i.fat_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fat_flush &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[3cc]"></a>fat_format</STRONG> (Thumb, 1518 bytes, Stack size 64 bytes, fs_fat.o(i.fat_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = fat_format &rArr; label_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_param
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_FormatOptionDetected
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
</UL>

<P><STRONG><a name="[32d]"></a>fat_handle_get</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fs_fat.o(i.fat_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fat_handle_get &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[3d4]"></a>fat_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, fs_fat.o(i.fat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fat_init &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[3d1]"></a>fat_jour_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fat_jour_init))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[3d0]"></a>fat_jour_prep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fat_jour_prep))
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[3d7]"></a>fat_mount</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, fs_fat.o(i.fat_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fat_mount &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_read
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[32e]"></a>fat_open</STRONG> (Thumb, 556 bytes, Stack size 72 bytes, fs_fat.o(i.fat_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_PathName
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_InvalidParameter
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_FileHandleInvalid
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[332]"></a>fat_read</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, fs_fat.o(i.fat_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_InvalidParameter
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_FileHandleInvalid
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[335]"></a>fat_seek</STRONG> (Thumb, 552 bytes, Stack size 48 bytes, fs_fat.o(i.fat_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_FileHandleInvalid
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[3e0]"></a>fat_unmount</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fs_fat.o(i.fat_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fat_unmount &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funmount
</UL>

<P><STRONG><a name="[3c4]"></a>fat_vol_chk</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, fs_fat.o(i.fat_vol_chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fat_vol_chk &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[338]"></a>fat_write</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, fs_fat.o(i.fat_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_InvalidParameter
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_FileHandleInvalid
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[3bc]"></a>fexists</STRONG> (Thumb, 34 bytes, Stack size 288 bytes, tbook.o(i.fexists))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = fexists &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
</UL>

<P><STRONG><a name="[3e1]"></a>ffind</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, fs_mapi.o(i.ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ffind
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strpos
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strncasecmp
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fexists
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logMsgName
</UL>

<P><STRONG><a name="[3e6]"></a>fformat</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fs_mapi.o(i.fformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = fformat &rArr; fat_format &rArr; label_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_format
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMount
</UL>

<P><STRONG><a name="[69]"></a>_fgetc$unlocked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[3bf]"></a>finit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fs_mapi.o(i.finit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = finit &rArr; fs_component_init &rArr; fs_get_rtos_tick_freq &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMount
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLUN
</UL>

<P><STRONG><a name="[3ea]"></a>flashCode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tbutil.o(i.flashCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = flashCode &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashLED
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ec]"></a>flashInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tbutil.o(i.flashInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = flashInit &rArr; LED_Init &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbDelay_ms
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigKey
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3eb]"></a>flashLED</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tbutil.o(i.flashLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbDelay_ms
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSet
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashCode
</UL>

<P><STRONG><a name="[3ed]"></a>flushStats</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, logger.o(i.flushStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = flushStats &rArr; logEvtNI &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveStats
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNI
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerDown
</UL>

<P><STRONG><a name="[3c1]"></a>fmount</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fs_mapi.o(i.fmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fmount &rArr; fat_mount &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mount
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMount
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninitLUN
</UL>

<P><STRONG><a name="[68]"></a>_fputc$unlocked</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[3fd]"></a>freeBuff</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, audio.o(i.freeBuff))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saiEvent
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeBuffs
</UL>

<P><STRONG><a name="[378]"></a>freeBuffs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, audio.o(i.freeBuffs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = freeBuffs
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saiEvent
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWavPos
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audRecordComplete
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlaybackComplete
</UL>

<P><STRONG><a name="[3fe]"></a>fsMount</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tbook.o(i.fsMount))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = fsMount &rArr; fformat &rArr; fat_format &rArr; label_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
</UL>

<P><STRONG><a name="[3d5]"></a>fs_config</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fs_config.o(i.fs_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_config &rArr; fs_mutex_new &rArr; osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[3ff]"></a>fs_config_evr</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, fs_debug.o(i.fs_config_evr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fs_config_evr &rArr; EventRecorderEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[32c]"></a>fs_drive_id</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, fs_common.o(i.fs_drive_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fs_drive_id &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funmount
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_get_id
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[400]"></a>fs_get_rtos_tick_freq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fs_get_rtos_tick_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fs_get_rtos_tick_freq &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[403]"></a>fs_get_sys_tick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fs_get_sys_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fs_get_sys_tick &rArr; osKernelGetSysTimerCount &rArr; svcRtxKernelGetSysTimerCount &rArr; EvrRtxKernelGetSysTimerCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[405]"></a>fs_get_sys_tick_us</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_config.o(i.fs_get_sys_tick_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerFreq
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[3ad]"></a>fs_get_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[2ee]"></a>fs_ioc_device_ctrl</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, fs_ioc.o(i.fs_ioc_device_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fs_ioc_device_ctrl &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_NotAllowed
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_DriveIdInvalid
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLUN
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_LUN_CheckMedia
</UL>

<P><STRONG><a name="[407]"></a>fs_ioc_get_cache</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fs_ioc.o(i.fs_ioc_get_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fs_ioc_get_cache &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_NotAllowed
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_DriveIdInvalid
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCacheInfoLUN
</UL>

<P><STRONG><a name="[408]"></a>fs_ioc_get_id</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fs_ioc.o(i.fs_ioc_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fs_ioc_get_id &rArr; fs_drive_id &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_NotAllowed
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLUN
</UL>

<P><STRONG><a name="[409]"></a>fs_ioc_lock</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fs_ioc.o(i.fs_ioc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fs_ioc_lock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_NotAllowed
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_DriveIdInvalid
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLUN
</UL>

<P><STRONG><a name="[2ef]"></a>fs_ioc_read_info</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, fs_ioc.o(i.fs_ioc_read_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fs_ioc_read_info &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_NotAllowed
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_DriveIdInvalid
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_LUN_GetMediaCapacity
</UL>

<P><STRONG><a name="[2f0]"></a>fs_ioc_read_sector</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, fs_ioc.o(i.fs_ioc_read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fs_ioc_read_sector &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_NotAllowed
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_DriveIdInvalid
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_LUN_Read
</UL>

<P><STRONG><a name="[40a]"></a>fs_ioc_unlock</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, fs_ioc.o(i.fs_ioc_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fs_ioc_unlock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_NotAllowed
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_DriveIdInvalid
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninitLUN
</UL>

<P><STRONG><a name="[2f2]"></a>fs_ioc_write_sector</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, fs_ioc.o(i.fs_ioc_write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fs_ioc_write_sector &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_NotAllowed
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsIOC_DriveIdInvalid
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_LUN_Write
</UL>

<P><STRONG><a name="[467]"></a>fs_mc_lock_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_mc_mci.o(i.fs_mc_lock_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[322]"></a>fs_mutex_acquire</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fs_config.o(i.fs_mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_mutex_acquire &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funmount
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[402]"></a>fs_mutex_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fs_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_mutex_new &rArr; osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
</UL>

<P><STRONG><a name="[325]"></a>fs_mutex_release</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_config.o(i.fs_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_mutex_release &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funmount
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[401]"></a>fs_set_cdrive</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_common.o(i.fs_set_cdrive))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[40b]"></a>fs_set_rtos_delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_config.o(i.fs_set_rtos_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_set_rtos_delay &rArr; osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_card_power
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_sleep
</UL>

<P><STRONG><a name="[3e4]"></a>fs_strmatch</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs_common.o(i.fs_strmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fs_strmatch &rArr; fs_strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strncasecmp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[3e5]"></a>fs_strncasecmp</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, fs_common.o(i.fs_strncasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
</UL>

<P><STRONG><a name="[3e2]"></a>fs_strpos</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_common.o(i.fs_strpos))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[387]"></a>fsj_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fsj_write))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[40c]"></a>funmount</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fs_mapi.o(i.funmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = funmount &rArr; fat_unmount &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_unmount
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_unmount
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLUN
</UL>

<P><STRONG><a name="[40e]"></a>gConfigADC</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tbutil.o(i.gConfigADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gConfigADC &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPwrSignals
</UL>

<P><STRONG><a name="[268]"></a>gConfigI2S</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tbutil.o(i.gConfigI2S))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gConfigI2S &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Initialize
</UL>

<P><STRONG><a name="[410]"></a>gConfigIn</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tbutil.o(i.gConfigIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gConfigIn &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigKey
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPwrSignals
</UL>

<P><STRONG><a name="[395]"></a>gConfigKey</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tbutil.o(i.gConfigKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gConfigKey &rArr; gConfigIn &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigIn
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashInit
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configInputKey
</UL>

<P><STRONG><a name="[271]"></a>gConfigOut</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tbutil.o(i.gConfigOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gConfigOut &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPwrSignals
</UL>

<P><STRONG><a name="[230]"></a>gDef</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, tbutil.o(i.gDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = gDef &rArr; atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DefineSignals
</UL>

<P><STRONG><a name="[38a]"></a>gGet</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tbutil.o(i.gGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateKeyState
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeInterrupts
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInputs
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPower
</UL>

<P><STRONG><a name="[390]"></a>gOutVal</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, tbutil.o(i.gOutVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gOutVal
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkPwrState
</UL>

<P><STRONG><a name="[1d9]"></a>gSet</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, tbutil.o(i.gSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgTgl
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashLED
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledSet
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SpeakerEnable
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_PowerUp
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_PowerDown
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPwrSignals
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableADC
</UL>

<P><STRONG><a name="[26e]"></a>gUnconfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tbutil.o(i.gUnconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gUnconfig &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePowerEvent
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Uninitialize
</UL>

<P><STRONG><a name="[2ec]"></a>getCacheInfoLUN</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, usbd_user_device_msc_lun.o(i.getCacheInfoLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = getCacheInfoLUN &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_get_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_GetCacheInfo
</UL>

<P><STRONG><a name="[411]"></a>getField</STRONG> (Thumb, 170 bytes, Stack size 136 bytes, tkntable.o(i.getField))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = getField &rArr; toTkn &rArr; initTknTable &rArr;  toTkn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listEl
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toTkn
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toStr
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstCnt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIntFld
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readContent
</UL>

<P><STRONG><a name="[415]"></a>getIntFld</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, tkntable.o(i.getIntFld))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = getIntFld &rArr; getField &rArr; toTkn &rArr; initTknTable &rArr;  toTkn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknStr
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getField
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
</UL>

<P><STRONG><a name="[416]"></a>getLstNm</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, tkntable.o(i.getLstNm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getLstNm &rArr; listEl &rArr; iLstHd &rArr; tknGrp
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listEl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVS
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCGrp
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
</UL>

<P><STRONG><a name="[417]"></a>getLstVal</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, tkntable.o(i.getLstVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getLstVal &rArr; listEl &rArr; iLstHd &rArr; tknGrp
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listEl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVS
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCGrp
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
</UL>

<P><STRONG><a name="[39f]"></a>getStatus</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mediaplayer.o(i.getStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
</UL>

<P><STRONG><a name="[35f]"></a>get_u16</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_common.o(i.get_u16))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_read
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[360]"></a>get_u32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fs_common.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_write_sector
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_unlock
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_read_sector
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_read_info
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_lock
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_get_id
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_get_cache
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_device_ctrl
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_read
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>

<P><STRONG><a name="[1d7]"></a>handleInterrupt</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, inputmanager.o(i.handleInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = handleInterrupt &rArr; updateKeyState &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateKeyState
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInputs
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInputs
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputThread
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInputs
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[41a]"></a>handlePowerEvent</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ledmanager.o(i.handlePowerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = handlePowerEvent &rArr; LED_Init &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gUnconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLedManager
</UL>

<P><STRONG><a name="[6b]"></a>i2c_Sig_Event</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ak4xxx.o(i.i2c_Sig_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_Sig_Event &rArr; cntErr
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntErr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ak4xxx.o(i.I2C_initialize)
</UL>
<P><STRONG><a name="[371]"></a>initBuffs</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, audio.o(i.initBuffs))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = initBuffs &rArr; tbAlloc &rArr; errLog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audInitialize
</UL>

<P><STRONG><a name="[41c]"></a>initControlManager</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, controlmanager.o(i.initControlManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = initControlManager &rArr; readControlDef &rArr; parseFile &rArr; parseValue &rArr; parseLstObj &rArr;  parseValue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBmode
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvt
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderDisable
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readContent
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTknTable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
</UL>

<P><STRONG><a name="[420]"></a>initIDs</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, tbutil.o(i.initIDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = initIDs &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[421]"></a>initInputManager</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, inputmanager.o(i.initInputManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = initInputManager &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolNew
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetKeypadTest
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
</UL>

<P><STRONG><a name="[2ed]"></a>initLUN</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, usbd_user_device_msc_lun.o(i.initLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = initLUN &rArr; funmount &rArr; fat_unmount &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funmount
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_lock
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_get_id
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_device_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_Initialize
</UL>

<P><STRONG><a name="[427]"></a>initLedManager</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ledmanager.o(i.initLedManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = initLedManager &rArr; ledBg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePowerEvent
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBg
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
</UL>

<P><STRONG><a name="[429]"></a>initLogger</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, logger.o(i.initLogger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = initLogger &rArr; logPowerUp &rArr; showRTC &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
</UL>

<P><STRONG><a name="[42a]"></a>initMediaPlayer</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, mediaplayer.o(i.initMediaPlayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = initMediaPlayer &rArr; audInitialize &rArr; initBuffs &rArr; tbAlloc &rArr; errLog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbAlloc
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
</UL>

<P><STRONG><a name="[42b]"></a>initPowerMgr</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, powermanager.o(i.initPowerMgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = initPowerMgr &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPwrSignals
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
</UL>

<P><STRONG><a name="[42f]"></a>initPrintf</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tbutil.o(i.initPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = initPrintf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41d]"></a>initTknTable</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, tkntable.o(i.initTknTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = initTknTable &rArr;  toTkn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyEnum
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addGroup
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toTkn
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initControlManager
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toTkn
</UL>

<P><STRONG><a name="[422]"></a>initializeInterrupts</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, inputmanager.o(i.initializeInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = initializeInterrupts &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootToDFU
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gGet
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configInputKey
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initInputManager
</UL>

<P><STRONG><a name="[71]"></a>inputThread</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, inputmanager.o(i.inputThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = inputThread &rArr; keypadTestKey &rArr; startKeypadTest &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startKeypadTest
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypadTestKey
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInterrupt
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inputmanager.o(i.initInputManager)
</UL>
<P><STRONG><a name="[435]"></a>isLst</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tkntable.o(i.isLst))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isLst &rArr; tknGrp
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknGrp
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
</UL>

<P><STRONG><a name="[39b]"></a>isMassStorageEnabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_user_device_msc_lun.o(i.isMassStorageEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
</UL>

<P><STRONG><a name="[434]"></a>keypadTestKey</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, inputmanager.o(i.keypadTestKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = keypadTestKey &rArr; startKeypadTest &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startKeypadTest
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputThread
</UL>

<P><STRONG><a name="[428]"></a>ledBg</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ledmanager.o(i.ledBg))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = ledBg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNS
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertSeq
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLedManager
</UL>

<P><STRONG><a name="[374]"></a>ledFg</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ledmanager.o(i.ledFg))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNS
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertSeq
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledSig
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startKeypadTest
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypadTestKey
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSig
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startRecord
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startPlayback
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audRecordComplete
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlaybackComplete
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPauseResumeAudio
</UL>

<P><STRONG><a name="[43f]"></a>ledSet</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ledmanager.o(i.ledSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ledSet &rArr; gSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSet
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledThread
</UL>

<P><STRONG><a name="[3b6]"></a>ledSig</STRONG> (Thumb, 254 bytes, Stack size 184 bytes, controlmanager.o(i.ledSig))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = ledSig &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFg
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLED
</UL>

<P><STRONG><a name="[72]"></a>ledThread</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, ledmanager.o(i.ledThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ledThread &rArr; osEventFlagsWait &rArr; EventFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledSet
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledmanager.o(i.initLedManager)
</UL>
<P><STRONG><a name="[373]"></a>loadBuff</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, audio.o(i.loadBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = loadBuff &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocBuff
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audLoadBuffs
</UL>

<P><STRONG><a name="[441]"></a>loadStats</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, logger.o(i.loadStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = loadStats &rArr; saveStats &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveStats
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statFNm
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startRecAudio
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSubjAudio
</UL>

<P><STRONG><a name="[31c]"></a>logEvt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, logger.o(i.logEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = logEvt &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtS
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBmode
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initControlManager
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerDown
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readADC
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerThreadProc
</UL>

<P><STRONG><a name="[3a2]"></a>logEvtNI</STRONG> (Thumb, 34 bytes, Stack size 320 bytes, logger.o(i.logEvtNI))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = logEvtNI &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtS
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushStats
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
</UL>

<P><STRONG><a name="[38d]"></a>logEvtNS</STRONG> (Thumb, 34 bytes, Stack size 320 bytes, logger.o(i.logEvtNS))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtS
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startRecAudio
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSysAudio
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSubjAudio
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRTC
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFg
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPower
</UL>

<P><STRONG><a name="[443]"></a>logEvtS</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, logger.o(i.logEvtS))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addHist
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNS
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvt
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNI
</UL>

<P><STRONG><a name="[444]"></a>logMsgName</STRONG> (Thumb, 158 bytes, Stack size 408 bytes, logger.o(i.logMsgName))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = logMsgName &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startRecAudio
</UL>

<P><STRONG><a name="[31d]"></a>logPowerDown</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, logger.o(i.logPowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = logPowerDown &rArr; flushStats &rArr; logEvtNI &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvt
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushStats
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBmode
</UL>

<P><STRONG><a name="[320]"></a>logPowerUp</STRONG> (Thumb, 396 bytes, Stack size 552 bytes, logger.o(i.logPowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = logPowerUp &rArr; showRTC &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNS
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRTC
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errLog
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvt
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupRTC
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtS
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNI
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fscanf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBmode
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLogger
</UL>

<P><STRONG><a name="[414]"></a>lstCnt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tkntable.o(i.lstCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lstCnt &rArr; asTknLst &rArr; iLstHd &rArr; tknGrp
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asTknLst
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVS
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getField
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCGrp
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readContent
</UL>

<P><STRONG><a name="[142]"></a>main</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232 + Unknown Stack Size
<LI>Call Chain = main &rArr; talking_book &rArr; initControlManager &rArr; readControlDef &rArr; parseFile &rArr; parseValue &rArr; parseLstObj &rArr;  parseValue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPrintf
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIDs
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gGet
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigI2S
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashInit
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashCode
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DefineSignals
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[44c]"></a>mc_mci_DevCtrl</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, fs_mc_mci.o(i.mc_mci_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = mc_mci_DevCtrl &rArr; mc_mci_Init &rArr; mc_native_init &rArr; mc_control_lock &rArr; mc_set_block_len &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_update_sw_state
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_deselect
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_sleep
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_cid
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_DevCtrl
</UL>

<P><STRONG><a name="[272]"></a>mc_mci_DrvEvent</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_mci_DrvEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_mci_DrvEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC0_MCI_SignalEvent
</UL>

<P><STRONG><a name="[44d]"></a>mc_mci_Init</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_mci_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mc_mci_Init &rArr; mc_native_init &rArr; mc_control_lock &rArr; mc_set_block_len &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_idle_clock
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_data_timeout
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_card_power
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_bus_width
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_bus_speed_mode
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_bus_speed
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_Init
</UL>

<P><STRONG><a name="[44e]"></a>mc_mci_ReadInfo</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_mci_ReadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mc_mci_ReadInfo &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdInfo
</UL>

<P><STRONG><a name="[44f]"></a>mc_mci_ReadSector</STRONG> (Thumb, 362 bytes, Stack size 64 bytes, fs_mc_mci.o(i.mc_mci_ReadSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mc_mci_ReadSector &rArr; mc_select_tran_state &rArr; mc_stop_transmission &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_stop_transmission
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_deselect
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_ReadXferSetupError
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdSect
</UL>

<P><STRONG><a name="[450]"></a>mc_mci_UnInit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_mci_UnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mc_mci_UnInit &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_card_power
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_UnInit
</UL>

<P><STRONG><a name="[451]"></a>mc_mci_WriteSector</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, fs_mc_mci.o(i.mc_mci_WriteSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mc_mci_WriteSector &rArr; mc_select_tran_state &rArr; mc_stop_transmission &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_stop_transmission
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_deselect
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_WriteXferSetupError
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_WrSect
</UL>

<P><STRONG><a name="[46c]"></a>nTkn</STRONG> (Thumb, 46 bytes, Stack size 112 bytes, tkntable.o(i.nTkn))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = nTkn &rArr; cTkn &rArr; tokenize &rArr;  toTkn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTkn
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toStr
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseValue
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseName
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLstObj
</UL>

<P><STRONG><a name="[2b8]"></a>osDelay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_delay.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbDelay_ms
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recordAudio
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playAudio
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>

<P><STRONG><a name="[424]"></a>osEventFlagsNew</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtx_evflags.o(i.osEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osEventFlagsNew
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerMgr
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMediaPlayer
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLedManager
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initInputManager
</UL>

<P><STRONG><a name="[1c9]"></a>osEventFlagsSet</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, rtx_evflags.o(i.osEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saiEvent
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateKeyState
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInterrupt
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recordAudio
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playAudio
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFg
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBg
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPowerTimer
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[432]"></a>osEventFlagsWait</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, rtx_evflags.o(i.osEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osEventFlagsWait &rArr; EventFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mediaThread
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledThread
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputThread
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readADC
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerThreadProc
</UL>

<P><STRONG><a name="[475]"></a>osKernelGetState</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivileged
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbDelay_ms
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[404]"></a>osKernelGetSysTimerCount</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetSysTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osKernelGetSysTimerCount &rArr; svcRtxKernelGetSysTimerCount &rArr; EvrRtxKernelGetSysTimerCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>

<P><STRONG><a name="[406]"></a>osKernelGetSysTimerFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetSysTimerFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerFreq
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
</UL>

<P><STRONG><a name="[479]"></a>osKernelGetTickCount</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickCount
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
</UL>

<P><STRONG><a name="[2b7]"></a>osKernelGetTickFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickFreq
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_rtos_tick_freq
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsWait
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>

<P><STRONG><a name="[341]"></a>osKernelInitialize</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osKernelInitialize &rArr; osRtxKernelPreInit &rArr; evr_initialize &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[44b]"></a>osKernelStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osKernelStart &rArr; EvrRtxKernelStart &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47b]"></a>osMemoryPoolAlloc</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rtx_mempool.o(i.osMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMemoryPoolAlloc &rArr; osRtxMemoryPoolAlloc &rArr; EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEvent
</UL>

<P><STRONG><a name="[3a6]"></a>osMemoryPoolFree</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, rtx_mempool.o(i.osMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osMemoryPoolFree &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
</UL>

<P><STRONG><a name="[426]"></a>osMemoryPoolNew</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rtx_mempool.o(i.osMemoryPoolNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osMemoryPoolNew
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initInputManager
</UL>

<P><STRONG><a name="[399]"></a>osMessageQueueGet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventTest
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[425]"></a>osMessageQueueNew</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osMessageQueueNew
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initInputManager
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[481]"></a>osMessageQueuePut</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEvent
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[33d]"></a>osMutexAcquire</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtx_mutex.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[33e]"></a>osMutexDelete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_mutex.o(i.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[33f]"></a>osMutexNew</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtx_mutex.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[340]"></a>osMutexRelease</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_mutex.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[33c]"></a>osRtxErrorNotify</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tbutil.o(i.osRtxErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>

<P><STRONG><a name="[8c]"></a>osRtxIdleThread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxIdleThread))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[47a]"></a>osRtxKernelPreInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_lib.o(i.osRtxKernelPreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxKernelPreInit &rArr; evr_initialize &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evr_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[486]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, rtx_memory.o(i.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[488]"></a>osRtxMemoryFree</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_memory.o(i.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[489]"></a>osRtxMemoryInit</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rtx_memory.o(i.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxMemoryInit &rArr; EvrRtxMemoryInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[439]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_mempool.o(i.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxMemoryPoolAlloc &rArr; EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolPostProcess
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[47e]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_mempool.o(i.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[48d]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rtx_mempool.o(i.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[491]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtx_mutex.o(i.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[14f]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, rtx_system.o(i.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[437]"></a>osRtxPostProcess</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_system.o(i.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[494]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxThreadDelayTick &rArr; EvrRtxThreadUnblocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[492]"></a>osRtxThreadDispatch</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[48e]"></a>osRtxThreadListGet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolPostProcess
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[49b]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, rtx_thread.o(i.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[484]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>

<P><STRONG><a name="[49a]"></a>osRtxThreadListSort</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[495]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[490]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[49c]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadStackCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[49d]"></a>osRtxThreadStartup</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[498]"></a>osRtxThreadSwitch</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[49e]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[485]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolPostProcess
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[150]"></a>osRtxTick_Handler</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, rtx_system.o(i.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8d]"></a>osRtxTimerThread</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtx_timer.o(i.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[310]"></a>osSemaphoreAcquire</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, rtx_semaphore.o(i.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osSemaphoreAcquire &rArr; SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
</UL>

<P><STRONG><a name="[312]"></a>osSemaphoreDelete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_semaphore.o(i.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osSemaphoreDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreDelete
</UL>

<P><STRONG><a name="[311]"></a>osSemaphoreNew</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rtx_semaphore.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreCreate
</UL>

<P><STRONG><a name="[313]"></a>osSemaphoreRelease</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, rtx_semaphore.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
</UL>

<P><STRONG><a name="[9f]"></a>osThreadExit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_thread.o(i.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[316]"></a>osThreadFlagsSet</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, rtx_thread.o(i.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsSet
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsSet
</UL>

<P><STRONG><a name="[317]"></a>osThreadFlagsWait</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rtx_thread.o(i.osThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osThreadFlagsWait
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsWait
</UL>

<P><STRONG><a name="[33b]"></a>osThreadGetId</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_thread.o(i.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadGetId &rArr; svcRtxThreadGetId &rArr; EvrRtxThreadGetId &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[315]"></a>osThreadNew</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtx_thread.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerMgr
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMediaPlayer
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLedManager
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initInputManager
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadCreate
</UL>

<P><STRONG><a name="[319]"></a>osThreadTerminate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osThreadTerminate &rArr; EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadTerminate
</UL>

<P><STRONG><a name="[42c]"></a>osTimerNew</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, rtx_timer.o(i.osTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerMgr
</UL>

<P><STRONG><a name="[42e]"></a>osTimerStart</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtx_timer.o(i.osTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osTimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerMgr
</UL>

<P><STRONG><a name="[4aa]"></a>parseFile</STRONG> (Thumb, 122 bytes, Stack size 424 bytes, tkntable.o(i.parseFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696 + Unknown Stack Size
<LI>Call Chain = parseFile &rArr; parseValue &rArr; parseLstObj &rArr;  parseValue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbShw
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showTknTable
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseValue
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTkn
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toStr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readContent
</UL>

<P><STRONG><a name="[3a0]"></a>pauseResume</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mediaplayer.o(i.pauseResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = pauseResume &rArr; audPauseResumeAudio &rArr; setWavPos &rArr; audPlaybackComplete &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPauseResumeAudio
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
</UL>

<P><STRONG><a name="[4b4]"></a>playAudio</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mediaplayer.o(i.playAudio))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = playAudio &rArr; audStopAudio &rArr; audPlaybackComplete &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audGetState
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audStopAudio
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSysAudio
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSubjAudio
</UL>

<P><STRONG><a name="[3a1]"></a>playPosition</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mediaplayer.o(i.playPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = playPosition &rArr; audPlayPct &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlayPct
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
</UL>

<P><STRONG><a name="[241]"></a>printAudSt</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, audio.o(i.printAudSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = printAudSt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
</UL>

<P><STRONG><a name="[38b]"></a>readADC</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, powermanager.o(i.readADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = readADC &rArr; logEvt &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvt
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startADC
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPower
</UL>

<P><STRONG><a name="[41f]"></a>readContent</STRONG> (Thumb, 308 bytes, Stack size 376 bytes, controlparser.o(i.readContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072 + Unknown Stack Size
<LI>Call Chain = readContent &rArr; parseFile &rArr; parseValue &rArr; parseLstObj &rArr;  parseValue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbAlloc
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenize
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknStr
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseFile
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstCnt
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getField
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asPunct
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocStr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPath
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initControlManager
</UL>

<P><STRONG><a name="[41e]"></a>readControlDef</STRONG> (Thumb, 736 bytes, Stack size 472 bytes, controlparser.o(i.readControlDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168 + Unknown Stack Size
<LI>Call Chain = readControlDef &rArr; parseFile &rArr; parseValue &rArr; parseLstObj &rArr;  parseValue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVStr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toTkn
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toStr
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknStr
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseFile
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstCnt
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLst
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLstVal
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLstNm
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIntFld
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getField
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asEvent
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asAction
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCGrp
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAnyKey
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadPath
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asStIdx
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initControlManager
</UL>

<P><STRONG><a name="[293]"></a>readPVD</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, powermanager.o(i.readPVD))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = readPVD &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbDelay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4b9]"></a>recordAudio</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mediaplayer.o(i.recordAudio))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = recordAudio &rArr; audStopAudio &rArr; audPlaybackComplete &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audGetState
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audStopAudio
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startRecAudio
</UL>

<P><STRONG><a name="[4ba]"></a>releaseBuff</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, audio.o(i.releaseBuff))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveBuff
</UL>

<P><STRONG><a name="[423]"></a>resetKeypadTest</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, inputmanager.o(i.resetKeypadTest))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initInputManager
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startKeypadTest
</UL>

<P><STRONG><a name="[267]"></a>reset_I2S_Info</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, i2s_stm32f4xx.o(i.reset_I2S_Info))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_PowerControl
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Initialize
</UL>

<P><STRONG><a name="[6f]"></a>saiEvent</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, audio.o(i.saiEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = saiEvent &rArr; audRecordComplete &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeBuffs
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeBuff
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audRecordComplete
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio.o(i.audInitialize)
</UL>
<P><STRONG><a name="[37b]"></a>saveBuff</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, audio.o(i.saveBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = saveBuff &rArr; fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;releaseBuff
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audSaveBuffs
</UL>

<P><STRONG><a name="[3ee]"></a>saveStats</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, logger.o(i.saveStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = saveStats &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statFNm
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flushStats
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStats
</UL>

<P><STRONG><a name="[377]"></a>sendEvent</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, inputmanager.o(i.sendEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = sendEvent &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputThread
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPower
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlaybackComplete
</UL>

<P><STRONG><a name="[3a9]"></a>seqAddShade</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ledmanager.o(i.seqAddShade))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = seqAddShade
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertSeq
</UL>

<P><STRONG><a name="[4bb]"></a>setDev</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tbook.o(i.setDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setDev &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
</UL>

<P><STRONG><a name="[3b7]"></a>setTxtColor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tbutil.o(i.setTxtColor))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errLog
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrLog
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
</UL>

<P><STRONG><a name="[36f]"></a>setWavPos</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, audio.o(i.setWavPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = setWavPos &rArr; audPlaybackComplete &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startPlayback
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeBuffs
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlaybackComplete
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPauseResumeAudio
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audAdjPlayPos
</UL>

<P><STRONG><a name="[361]"></a>set_u16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_common.o(i.set_u16))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[362]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_common.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[446]"></a>setupRTC</STRONG> (Thumb, 976 bytes, Stack size 124 bytes, powermanager.o(i.setupRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = setupRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
</UL>

<P><STRONG><a name="[447]"></a>showRTC</STRONG> (Thumb, 226 bytes, Stack size 208 bytes, tbutil.o(i.showRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = showRTC &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNS
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
</UL>

<P><STRONG><a name="[39e]"></a>showSig</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, controlmanager.o(i.showSig))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = showSig &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkPwrState
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgTgl
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
</UL>

<P><STRONG><a name="[4ad]"></a>showTknTable</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, tkntable.o(i.showTknTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = showTknTable &rArr; dbgLog &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseFile
</UL>

<P><STRONG><a name="[4b6]"></a>startADC</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, powermanager.o(i.startADC))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readADC
</UL>

<P><STRONG><a name="[433]"></a>startKeypadTest</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, inputmanager.o(i.startKeypadTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = startKeypadTest &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetKeypadTest
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFg
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypadTestKey
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputThread
</UL>

<P><STRONG><a name="[280]"></a>startPlayback</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, audio.o(i.startPlayback))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = startPlayback &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetMute
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audLoadBuffs
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayWave
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWavPos
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPauseResumeAudio
</UL>

<P><STRONG><a name="[37d]"></a>startRecord</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, audio.o(i.startRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = startRecord &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFg
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audStartRecording
</UL>

<P><STRONG><a name="[343]"></a>stdout_putchar</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, tbutil.o(i.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = stdout_putchar &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDwriteln
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[3a4]"></a>stopRecording</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mediaplayer.o(i.stopRecording))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stopRecording
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audStopRecording
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
</UL>

<P><STRONG><a name="[76]"></a>talking_book</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, tbook.o(i.talking_book))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232 + Unknown Stack Size
<LI>Call Chain = talking_book &rArr; initControlManager &rArr; readControlDef &rArr; parseFile &rArr; parseValue &rArr; parseLstObj &rArr;  parseValue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrLog
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvt
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerMgr
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMediaPlayer
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLogger
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLedManager
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initInputManager
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initControlManager
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashLED
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDev
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMount
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fexists
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugLoop
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyFile
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gGet
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashCode
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[358]"></a>tbAlloc</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tbutil.o(i.tbAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tbAlloc &rArr; errLog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errLog
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMediaPlayer
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTBHistory
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asStIdx
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocStr
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readContent
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBuffs
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audInitState
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audInitialize
</UL>

<P><STRONG><a name="[1da]"></a>tbDelay_ms</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tbutil.o(i.tbDelay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashLED
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashInit
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SpeakerEnable
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetMasterFreq
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_PowerUp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Reinit
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPVD
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPwrSignals
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableADC
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Configure
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S3_ClockEnable
</UL>

<P><STRONG><a name="[1c8]"></a>tbErr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tbutil.o(i.tbErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvtS
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashLED
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stIdx
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventTest
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbAlloc
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gDef
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerMgr
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMediaPlayer
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLedManager
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initInputManager
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DefineSignals
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyEnum
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseValue
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseName
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLstObj
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstID
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashFn
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenize
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toTkn
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseFile
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asStIdx
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEvent
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readContent
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPath
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_WrReg
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWavPos
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audStartRecording
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlayAudio
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audAdjPlayPos
</UL>

<P><STRONG><a name="[4ab]"></a>tbShw</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, tbutil.o(i.tbShw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tbShw &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseValue
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVStr
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseFile
</UL>

<P><STRONG><a name="[23d]"></a>tbTimeStamp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tbutil.o(i.tbTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventTest
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printAudSt
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbDelay_ms
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saiEvent
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtS
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateKeyState
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeInterrupts
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInterrupt
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startRecord
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startPlayback
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audRecordComplete
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audInitState
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlaybackComplete
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlayPct
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPauseResumeAudio
</UL>

<P><STRONG><a name="[366]"></a>tknGrp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tkntable.o(i.tknGrp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tknGrp
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asGroup
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyEnum
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVS
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iLstHd
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLst
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asPunct
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asEvent
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asAction
</UL>

<P><STRONG><a name="[36b]"></a>tknStr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tkntable.o(i.tknStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tknStr &rArr; asTkn
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asTkn
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyEnum
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVS
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLstObj
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIntFld
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadPath
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asStIdx
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readContent
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventNm
</UL>

<P><STRONG><a name="[346]"></a>tknVal</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tkntable.o(i.tknVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tknVal &rArr; asTkn
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asTkn
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addGroup
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asEvent
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asAction
</UL>

<P><STRONG><a name="[413]"></a>toStr</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, tkntable.o(i.toStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = toStr &rArr; toVStr &rArr; toVS &rArr;  toVS (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVStr
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nTkn
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseValue
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseFile
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getField
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
</UL>

<P><STRONG><a name="[345]"></a>toTkn</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, tkntable.o(i.toTkn))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = toTkn &rArr; initTknTable &rArr;  toTkn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashFn
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTknTable
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyEnum
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addGroup
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenize
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getField
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTknTable
</UL>

<P><STRONG><a name="[4b0]"></a>toVStr</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tkntable.o(i.toVStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = toVStr &rArr; toVS &rArr;  toVS (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbShw
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVS
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseValue
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toStr
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
</UL>

<P><STRONG><a name="[347]"></a>tokenize</STRONG> (Thumb, 290 bytes, Stack size 152 bytes, tkntable.o(i.tokenize))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = tokenize &rArr;  toTkn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toTkn
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTkn
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addGroup
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readContent
</UL>

<P><STRONG><a name="[2f3]"></a>uninitLUN</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_user_device_msc_lun.o(i.uninitLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = uninitLUN &rArr; fmount &rArr; fat_mount &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableMassStorage
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC0_Uninitialize
</UL>

<P><STRONG><a name="[419]"></a>updateKeyState</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, inputmanager.o(i.updateKeyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = updateKeyState &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gGet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInterrupt
</UL>

<P><STRONG><a name="[4c7]"></a>usrLog</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tbutil.o(i.usrLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = usrLog &rArr; vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTxtColor
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableLCD
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableLCD
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;talking_book
</UL>

<P><STRONG><a name="[63]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[12d]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[540]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[541]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[10f]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[113]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[31b]"></a>USBmode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, controlmanager.o(i.USBmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = USBmode &rArr; logPowerUp &rArr; showRTC &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvt
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableMassStorage
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableMassStorage
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerUp
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logPowerDown
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initControlManager
</UL>

<P><STRONG><a name="[397]"></a>controlTest</STRONG> (Thumb, 558 bytes, Stack size 16 bytes, controlmanager.o(i.controlTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = controlTest &rArr; USBmode &rArr; logPowerUp &rArr; showRTC &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startRecAudio
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stIdx
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSysAudio
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSubjAudio
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventTest
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBmode
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNS
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pauseResume
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvt
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isMassStorageEnabled
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjVolume
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjPlayPosition
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopRecording
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playPosition
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNI
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFg
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatus
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventNm
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetVolume
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSig
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initControlManager
</UL>

<P><STRONG><a name="[3be]"></a>debugTest</STRONG> (Thumb, 534 bytes, Stack size 48 bytes, controlmanager.o(i.debugTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = debugTest &rArr; dbgLED &rArr; ledSig &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgTgl
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLED
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playSysAudio
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fscanf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initControlManager
</UL>

<P><STRONG><a name="[3a5]"></a>eventTest</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, controlmanager.o(i.eventTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = eventTest &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbTimeStamp
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgLog
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventNm
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
</UL>

<P><STRONG><a name="[39d]"></a>playSubjAudio</STRONG> (Thumb, 126 bytes, Stack size 104 bytes, controlmanager.o(i.playSubjAudio))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = playSubjAudio &rArr; playAudio &rArr; audStopAudio &rArr; audPlaybackComplete &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNS
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playAudio
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStats
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPath
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
</UL>

<P><STRONG><a name="[39c]"></a>playSysAudio</STRONG> (Thumb, 42 bytes, Stack size 88 bytes, controlmanager.o(i.playSysAudio))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = playSysAudio &rArr; playAudio &rArr; audStopAudio &rArr; audPlaybackComplete &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNS
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playAudio
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPath
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugTest
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
</UL>

<P><STRONG><a name="[398]"></a>stIdx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, controlmanager.o(i.stIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = stIdx &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
</UL>

<P><STRONG><a name="[3a3]"></a>startRecAudio</STRONG> (Thumb, 96 bytes, Stack size 104 bytes, controlmanager.o(i.startRecAudio))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = startRecAudio &rArr; recordAudio &rArr; audStopAudio &rArr; audPlaybackComplete &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtNS
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recordAudio
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logMsgName
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStats
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPath
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTest
</UL>

<P><STRONG><a name="[357]"></a>allocStr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, controlparser.o(i.allocStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = allocStr &rArr; tbAlloc &rArr; errLog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbAlloc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadPath
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readContent
</UL>

<P><STRONG><a name="[363]"></a>appendIf</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, controlparser.o(i.appendIf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = appendIf &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathCat
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPath
</UL>

<P><STRONG><a name="[36a]"></a>asStIdx</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, controlparser.o(i.asStIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = asStIdx &rArr; tbAlloc &rArr; errLog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbAlloc
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknStr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCGrp
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAnyKey
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
</UL>

<P><STRONG><a name="[440]"></a>loadPath</STRONG> (Thumb, 34 bytes, Stack size 96 bytes, controlparser.o(i.loadPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = loadPath &rArr; allocStr &rArr; tbAlloc &rArr; errLog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknStr
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocStr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPath
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
</UL>

<P><STRONG><a name="[364]"></a>pathCat</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, controlparser.o(i.pathCat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pathCat &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendIf
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPath
</UL>

<P><STRONG><a name="[4b8]"></a>setAnyKey</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, controlparser.o(i.setAnyKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = setAnyKey &rArr; asStIdx &rArr; tbAlloc &rArr; errLog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asStIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
</UL>

<P><STRONG><a name="[4b7]"></a>setCGrp</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, controlparser.o(i.setCGrp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = setCGrp &rArr; asStIdx &rArr; tbAlloc &rArr; errLog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstCnt
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLstVal
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLstNm
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asEvent
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asStIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readControlDef
</UL>

<P><STRONG><a name="[344]"></a>addGroup</STRONG> (Thumb, 158 bytes, Stack size 144 bytes, tkntable.o(i.addGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = addGroup &rArr;  toTkn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknVal
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenize
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toTkn
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTknTable
</UL>

<P><STRONG><a name="[4c8]"></a>asTkn</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, tkntable.o(i.asTkn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = asTkn
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknVal
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknStr
</UL>

<P><STRONG><a name="[44a]"></a>asTknID</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tkntable.o(i.asTknID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = asTknID
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyEnum
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseValue
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLstObj
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstID
</UL>

<P><STRONG><a name="[36c]"></a>asTknLst</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tkntable.o(i.asTknLst))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = asTknLst &rArr; iLstHd &rArr; tknGrp
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iLstHd
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstCnt
</UL>

<P><STRONG><a name="[385]"></a>cTkn</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tkntable.o(i.cTkn))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = cTkn &rArr; tokenize &rArr;  toTkn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenize
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asPunct
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nTkn
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseValue
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseName
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLstObj
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseFile
</UL>

<P><STRONG><a name="[388]"></a>catIf</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, tkntable.o(i.catIf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = catIf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVS
</UL>

<P><STRONG><a name="[41b]"></a>hashFn</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tkntable.o(i.hashFn))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = hashFn &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toTkn
</UL>

<P><STRONG><a name="[36d]"></a>iLstHd</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tkntable.o(i.iLstHd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iLstHd &rArr; tknGrp
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknGrp
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listEl
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asTknLst
</UL>

<P><STRONG><a name="[412]"></a>listEl</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tkntable.o(i.listEl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = listEl &rArr; iLstHd &rArr; tknGrp
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iLstHd
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLstVal
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLstNm
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getField
</UL>

<P><STRONG><a name="[449]"></a>lstID</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tkntable.o(i.lstID))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = lstID &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asGroup
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asTknID
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseValue
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLstObj
</UL>

<P><STRONG><a name="[4ae]"></a>parseLstObj</STRONG> (Thumb, 408 bytes, Stack size 352 bytes, tkntable.o(i.parseLstObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = parseLstObj &rArr;  parseValue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nTkn
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseValue
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseName
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstID
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTkn
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asTknID
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknStr
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asPunct
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseValue
</UL>

<P><STRONG><a name="[4af]"></a>parseName</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tkntable.o(i.parseName))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = parseName &rArr; nTkn &rArr; cTkn &rArr; tokenize &rArr;  toTkn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nTkn
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTkn
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asPunct
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseValue
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLstObj
</UL>

<P><STRONG><a name="[4ac]"></a>parseValue</STRONG> (Thumb, 368 bytes, Stack size 456 bytes, tkntable.o(i.parseValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = parseValue &rArr; parseLstObj &rArr;  parseValue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbShw
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nTkn
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseName
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLstObj
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstID
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cTkn
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asTknID
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVStr
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toStr
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asPunct
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLstObj
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseFile
</UL>

<P><STRONG><a name="[4c9]"></a>toVS</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, tkntable.o(i.toVS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = toVS &rArr;  toVS (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknGrp
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVS
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catIf
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknStr
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstCnt
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLstVal
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLstNm
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVS
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toVStr
</UL>

<P><STRONG><a name="[431]"></a>verifyEnum</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, tkntable.o(i.verifyEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = verifyEnum &rArr;  toTkn (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbErr
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknGrp
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asTknID
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toTkn
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tknStr
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTknTable
</UL>

<P><STRONG><a name="[396]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inputmanager.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleInterrupt
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configInputKey
</UL>

<P><STRONG><a name="[348]"></a>addHist</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, logger.o(i.addHist))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = addHist &rArr; initTBHistory &rArr; tbAlloc &rArr; errLog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTBHistory
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvtS
</UL>

<P><STRONG><a name="[349]"></a>initTBHistory</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, logger.o(i.initTBHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = initTBHistory &rArr; tbAlloc &rArr; errLog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbAlloc
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addHist
</UL>

<P><STRONG><a name="[442]"></a>statFNm</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, logger.o(i.statFNm))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = statFNm &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveStats
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStats
</UL>

<P><STRONG><a name="[73]"></a>mediaThread</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, mediaplayer.o(i.mediaThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = mediaThread &rArr; audStartRecording &rArr; startRecord &rArr; ledFg &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audStartRecording
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audSaveBuffs
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlaybackComplete
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audPlayAudio
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audLoadBuffs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mediaplayer.o(i.initMediaPlayer)
</UL>
<P><STRONG><a name="[1d8]"></a>EnableADC</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, powermanager.o(i.EnableADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EnableADC &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbDelay_ms
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSet
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPower
</UL>

<P><STRONG><a name="[42d]"></a>initPwrSignals</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, powermanager.o(i.initPwrSignals))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = initPwrSignals &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbDelay_ms
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigOut
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigIn
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigADC
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSet
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPowerMgr
</UL>

<P><STRONG><a name="[75]"></a>powerThreadProc</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, powermanager.o(i.powerThreadProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = powerThreadProc &rArr; checkPower &rArr; logEvtNS &rArr; logEvtS &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logEvt
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableStandby
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powermanager.o(i.initPowerMgr)
</UL>
<P><STRONG><a name="[aa]"></a>I2S2_Control</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, i2s_stm32f4xx.o(i.I2S2_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = I2S2_Control &rArr; I2S_Control &rArr; I2S_Configure &rArr; ak_SetMasterFreq &rArr; akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2s_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>I2S2_GetCapabilities</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2s_stm32f4xx.o(i.I2S2_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2S2_GetCapabilities
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetCapabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2s_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>I2S2_GetRxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2s_stm32f4xx.o(i.I2S2_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2S2_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2s_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>I2S2_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2s_stm32f4xx.o(i.I2S2_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2S2_GetStatus &rArr; I2S_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2s_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>I2S2_GetTxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2s_stm32f4xx.o(i.I2S2_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2S2_GetTxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2s_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>I2S2_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2s_stm32f4xx.o(i.I2S2_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = I2S2_Initialize &rArr; I2S_Initialize &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2s_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>I2S2_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2s_stm32f4xx.o(i.I2S2_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = I2S2_PowerControl &rArr; I2S_PowerControl &rArr; ak_Init &rArr; ak_SetVolume &rArr; akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2s_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>I2S2_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2s_stm32f4xx.o(i.I2S2_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = I2S2_Receive &rArr; I2S2only_Receive &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2only_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2s_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>I2S2_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2s_stm32f4xx.o(i.I2S2_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = I2S2_Send &rArr; I2S2only_Send &rArr; ak_SpeakerEnable &rArr; akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2only_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2s_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>I2S2_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2s_stm32f4xx.o(i.I2S2_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = I2S2_Uninitialize &rArr; I2S_Uninitialize &rArr; I2S_PowerControl &rArr; ak_Init &rArr; ak_SetVolume &rArr; akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2s_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[25d]"></a>I2S2only_Receive</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, i2s_stm32f4xx.o(i.I2S2only_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2S2only_Receive &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Receive
</UL>

<P><STRONG><a name="[25e]"></a>I2S2only_Send</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, i2s_stm32f4xx.o(i.I2S2only_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = I2S2only_Send &rArr; ak_SpeakerEnable &rArr; akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SpeakerEnable
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetMute
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Send
</UL>

<P><STRONG><a name="[262]"></a>I2S3_ClockEnable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, i2s_stm32f4xx.o(i.I2S3_ClockEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I2S3_ClockEnable &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbDelay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Configure
</UL>

<P><STRONG><a name="[263]"></a>I2S_Configure</STRONG> (Thumb, 320 bytes, Stack size 80 bytes, i2s_stm32f4xx.o(i.I2S_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = I2S_Configure &rArr; ak_SetMasterFreq &rArr; akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbDelay_ms
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_SetMasterFreq
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S3_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Control
</UL>

<P><STRONG><a name="[256]"></a>I2S_Control</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, i2s_stm32f4xx.o(i.I2S_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = I2S_Control &rArr; I2S_Configure &rArr; ak_SetMasterFreq &rArr; akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTXMT
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortRCV
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Control
</UL>

<P><STRONG><a name="[257]"></a>I2S_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2s_stm32f4xx.o(i.I2S_GetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_GetCapabilities
</UL>

<P><STRONG><a name="[258]"></a>I2S_GetRxCount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2s_stm32f4xx.o(i.I2S_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_GetRxCount
</UL>

<P><STRONG><a name="[259]"></a>I2S_GetStatus</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, i2s_stm32f4xx.o(i.I2S_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2S_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_GetStatus
</UL>

<P><STRONG><a name="[25a]"></a>I2S_GetTxCount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2s_stm32f4xx.o(i.I2S_GetTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_GetTxCount
</UL>

<P><STRONG><a name="[25b]"></a>I2S_Initialize</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, i2s_stm32f4xx.o(i.I2S_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2S_Initialize &rArr; dbgEvt &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gConfigI2S
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_I2S_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Initialize
</UL>

<P><STRONG><a name="[25c]"></a>I2S_PowerControl</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, i2s_stm32f4xx.o(i.I2S_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = I2S_PowerControl &rArr; ak_Init &rArr; ak_SetVolume &rArr; akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEvt
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_PowerDown
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak_Init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_I2S_Info
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Uninitialize
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_PowerControl
</UL>

<P><STRONG><a name="[25f]"></a>I2S_Uninitialize</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2s_stm32f4xx.o(i.I2S_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = I2S_Uninitialize &rArr; I2S_PowerControl &rArr; ak_Init &rArr; ak_SetVolume &rArr; akUpd &rArr; Codec_WrReg &rArr;  Codec_WrReg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gUnconfig
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_PowerControl
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Uninitialize
</UL>

<P><STRONG><a name="[a1]"></a>I2Sx_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2s_stm32f4xx.o(i.I2Sx_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2Sx_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2s_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[26a]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2s_stm32f4xx.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortTXMT
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortRCV
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_PowerControl
</UL>

<P><STRONG><a name="[269]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, i2s_stm32f4xx.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_PowerControl
</UL>

<P><STRONG><a name="[26d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, i2s_stm32f4xx.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_PowerControl
</UL>

<P><STRONG><a name="[70]"></a>MC0_MCI_SignalEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.MC0_MCI_SignalEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MC0_MCI_SignalEvent &rArr; mc_mci_DrvEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DrvEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(i.fs_config)
</UL>
<P><STRONG><a name="[b1]"></a>mc0_DevCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.mc0_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = mc0_DevCtrl &rArr; mc_mci_DevCtrl &rArr; mc_mci_Init &rArr; mc_native_init &rArr; mc_control_lock &rArr; mc_set_block_len &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>mc0_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.mc0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mc0_Init &rArr; mc_mci_Init &rArr; mc_native_init &rArr; mc_control_lock &rArr; mc_set_block_len &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>mc0_RdInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.mc0_RdInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mc0_RdInfo &rArr; mc_mci_ReadInfo &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>mc0_RdSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.mc0_RdSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mc0_RdSect &rArr; mc_mci_ReadSector &rArr; mc_select_tran_state &rArr; mc_stop_transmission &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>mc0_UnInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.mc0_UnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mc0_UnInit &rArr; mc_mci_UnInit &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_UnInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>mc0_WrSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.mc0_WrSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mc0_WrSect &rArr; mc_mci_WriteSector &rArr; mc_select_tran_state &rArr; mc_stop_transmission &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[472]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_delay.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[471]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_delay.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[77]"></a>svcRtxDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_delay.o(i.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(i.osDelay)
</UL>
<P><STRONG><a name="[1db]"></a>EventFlagsCheck</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtx_evflags.o(i.EventFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EventFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_chk32_any
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
</UL>

<P><STRONG><a name="[1de]"></a>EventFlagsSet</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtx_evflags.o(i.EventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventFlagsSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_set32
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
</UL>

<P><STRONG><a name="[474]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_evflags.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[473]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_evflags.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[9b]"></a>osRtxEventFlagsPostProcess</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, rtx_evflags.o(i.osRtxEventFlagsPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = osRtxEventFlagsPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.svcRtxEventFlagsNew)
</UL>
<P><STRONG><a name="[78]"></a>svcRtxEventFlagsNew</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, rtx_evflags.o(i.svcRtxEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = svcRtxEventFlagsNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.osEventFlagsNew)
</UL>
<P><STRONG><a name="[79]"></a>svcRtxEventFlagsSet</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, rtx_evflags.o(i.svcRtxEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = svcRtxEventFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsSet
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.osEventFlagsSet)
</UL>
<P><STRONG><a name="[7a]"></a>svcRtxEventFlagsWait</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, rtx_evflags.o(i.svcRtxEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = svcRtxEventFlagsWait &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.osEventFlagsWait)
</UL>
<P><STRONG><a name="[477]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_kernel.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerFreq
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[476]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_kernel.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerFreq
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[478]"></a>IsPrivileged</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_kernel.o(i.IsPrivileged))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[7b]"></a>svcRtxKernelGetState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_kernel.o(i.svcRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetState)
</UL>
<P><STRONG><a name="[7c]"></a>svcRtxKernelGetSysTimerCount</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtx_kernel.o(i.svcRtxKernelGetSysTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxKernelGetSysTimerCount &rArr; EvrRtxKernelGetSysTimerCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetOverflow
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetInterval
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetCount
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetSysTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetSysTimerCount)
</UL>
<P><STRONG><a name="[7d]"></a>svcRtxKernelGetSysTimerFreq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelGetSysTimerFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetClock
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetSysTimerFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetSysTimerFreq)
</UL>
<P><STRONG><a name="[7e]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[7f]"></a>svcRtxKernelGetTickFreq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetTickFreq)
</UL>
<P><STRONG><a name="[80]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 538 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[81]"></a>svcRtxKernelStart</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[3c3]"></a>evr_initialize</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rtx_lib.o(i.evr_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = evr_initialize &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>

<P><STRONG><a name="[33a]"></a>os_kernel_is_active</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtx_lib.o(i.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_kernel_is_active &rArr; osKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[487]"></a>MemBlockPtr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtx_memory.o(i.MemBlockPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[47d]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_mempool.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolNew
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
</UL>

<P><STRONG><a name="[47c]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mempool.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolNew
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
</UL>

<P><STRONG><a name="[9c]"></a>osRtxMemoryPoolPostProcess</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rtx_mempool.o(i.osRtxMemoryPoolPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = osRtxMemoryPoolPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mempool.o(i.svcRtxMemoryPoolNew)
</UL>
<P><STRONG><a name="[82]"></a>svcRtxMemoryPoolAlloc</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, rtx_mempool.o(i.svcRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = svcRtxMemoryPoolAlloc &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mempool.o(i.osMemoryPoolAlloc)
</UL>
<P><STRONG><a name="[83]"></a>svcRtxMemoryPoolFree</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rtx_mempool.o(i.svcRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = svcRtxMemoryPoolFree &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mempool.o(i.osMemoryPoolFree)
</UL>
<P><STRONG><a name="[84]"></a>svcRtxMemoryPoolNew</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, rtx_mempool.o(i.svcRtxMemoryPoolNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = svcRtxMemoryPoolNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mempool.o(i.osMemoryPoolNew)
</UL>
<P><STRONG><a name="[480]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_msgqueue.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[47f]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_msgqueue.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[273]"></a>MessageQueueGet</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32_nz
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[276]"></a>MessageQueuePut</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[48f]"></a>MessageQueueRemove</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_msgqueue.o(i.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[436]"></a>isrRtxMessageQueueGet</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.isrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[438]"></a>isrRtxMessageQueuePut</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.isrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[9d]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[85]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, rtx_msgqueue.o(i.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueGet)
</UL>
<P><STRONG><a name="[86]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, rtx_msgqueue.o(i.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueNew)
</UL>
<P><STRONG><a name="[87]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, rtx_msgqueue.o(i.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueuePut)
</UL>
<P><STRONG><a name="[483]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_mutex.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[482]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mutex.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[88]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, rtx_mutex.o(i.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexAcquire)
</UL>
<P><STRONG><a name="[89]"></a>svcRtxMutexDelete</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, rtx_mutex.o(i.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexDelete)
</UL>
<P><STRONG><a name="[8a]"></a>svcRtxMutexNew</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, rtx_mutex.o(i.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexNew)
</UL>
<P><STRONG><a name="[8b]"></a>svcRtxMutexRelease</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, rtx_mutex.o(i.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[4a5]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_semaphore.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[4a4]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_semaphore.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[28f]"></a>SemaphoreTokenDecrement</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_semaphore.o(i.SemaphoreTokenDecrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[291]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_semaphore.o(i.SemaphoreTokenIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[9e]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtx_semaphore.o(i.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[8f]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rtx_semaphore.o(i.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[90]"></a>svcRtxSemaphoreDelete</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, rtx_semaphore.o(i.svcRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = svcRtxSemaphoreDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreDelete)
</UL>
<P><STRONG><a name="[91]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, rtx_semaphore.o(i.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreNew)
</UL>
<P><STRONG><a name="[92]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rtx_semaphore.o(i.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[43a]"></a>isr_queue_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_system.o(i.isr_queue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isr_queue_get
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[43d]"></a>isr_queue_put</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, rtx_system.o(i.isr_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[4a7]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>

<P><STRONG><a name="[4a6]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>

<P><STRONG><a name="[294]"></a>ThreadFlagsCheck</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtx_thread.o(i.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_any
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[297]"></a>ThreadFlagsSet</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtx_thread.o(i.ThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ThreadFlagsSet
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_set32
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[496]"></a>osRtxKernelGetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[493]"></a>osRtxThreadBlock</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[49f]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[4a0]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[499]"></a>osRtxThreadFree</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[497]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>

<P><STRONG><a name="[a0]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[4c5]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[93]"></a>svcRtxThreadExit</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rtx_thread.o(i.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[94]"></a>svcRtxThreadFlagsSet</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, rtx_thread.o(i.svcRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsSet
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadFlagsSet)
</UL>
<P><STRONG><a name="[95]"></a>svcRtxThreadFlagsWait</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtx_thread.o(i.svcRtxThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadFlagsWait &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadFlagsWait)
</UL>
<P><STRONG><a name="[96]"></a>svcRtxThreadGetId</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_thread.o(i.svcRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxThreadGetId &rArr; EvrRtxThreadGetId &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadGetId)
</UL>
<P><STRONG><a name="[97]"></a>svcRtxThreadNew</STRONG> (Thumb, 612 bytes, Stack size 56 bytes, rtx_thread.o(i.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadNew)
</UL>
<P><STRONG><a name="[98]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, rtx_thread.o(i.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadTerminate)
</UL>
<P><STRONG><a name="[4a9]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_timer.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[4a8]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_timer.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[4a3]"></a>TimerInsert</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, rtx_timer.o(i.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[4c6]"></a>TimerRemove</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rtx_timer.o(i.TimerRemove))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
</UL>

<P><STRONG><a name="[4a2]"></a>TimerUnlink</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_timer.o(i.TimerUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[8e]"></a>osRtxTimerTick</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_timer.o(i.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUnlink
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osRtxTimerThread)
</UL>
<P><STRONG><a name="[99]"></a>svcRtxTimerNew</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, rtx_timer.o(i.svcRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = svcRtxTimerNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osTimerNew)
</UL>
<P><STRONG><a name="[9a]"></a>svcRtxTimerStart</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_timer.o(i.svcRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = svcRtxTimerStart &rArr; TimerInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osTimerStart)
</UL>
<P><STRONG><a name="[1e5]"></a>EventCheckFilter</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, eventrecorder.o(i.EventCheckFilter))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[1e0]"></a>EventGetTS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, eventrecorder.o(i.EventGetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventGetTS
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_xch32
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
</UL>

<P><STRONG><a name="[1e6]"></a>EventRecordItem</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, eventrecorder.o(i.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__UnlockRecord
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__LockRecord
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
</UL>

<P><STRONG><a name="[1e8]"></a>GetContext</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eventrecorder.o(i.GetContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetContext
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_inc8
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>

<P><STRONG><a name="[1ed]"></a>crc16_ccitt</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, eventrecorder.o(i.crc16_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[252]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, i2c_stm32f4xx_1.o(i.Enable_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[d5]"></a>I2C1_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_stm32f4xx_1.o(i.I2C1_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = I2C1_Control &rArr; I2C_Control &rArr; HAL_Delay &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>I2C1_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f4xx_1.o(i.I2C1_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>I2C1_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c_stm32f4xx_1.o(i.I2C1_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>I2C1_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_stm32f4xx_1.o(i.I2C1_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = I2C1_Initialize &rArr; I2C_Initialize &rArr; HAL_DMA_Init &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>I2C1_MasterReceive</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_stm32f4xx_1.o(i.I2C1_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2C1_MasterReceive &rArr; I2C_MasterReceive &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>I2C1_MasterTransmit</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_stm32f4xx_1.o(i.I2C1_MasterTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2C1_MasterTransmit &rArr; I2C_MasterTransmit &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>I2C1_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_stm32f4xx_1.o(i.I2C1_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = I2C1_PowerControl &rArr; I2C_PowerControl &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>I2C1_SlaveReceive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_stm32f4xx_1.o(i.I2C1_SlaveReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C1_SlaveReceive &rArr; I2C_SlaveReceive &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>I2C1_SlaveTransmit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_stm32f4xx_1.o(i.I2C1_SlaveTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C1_SlaveTransmit &rArr; I2C_SlaveTransmit &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>I2C1_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f4xx_1.o(i.I2C1_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C1_Uninitialize &rArr; I2C_Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>I2CX_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c_stm32f4xx_1.o(i.I2CX_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>I2CX_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f4xx_1.o(i.I2CX_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2CX_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[242]"></a>I2C_Control</STRONG> (Thumb, 790 bytes, Stack size 56 bytes, i2c_stm32f4xx_1.o(i.I2C_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = I2C_Control &rArr; HAL_Delay &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Control
</UL>

<P><STRONG><a name="[243]"></a>I2C_ER_IRQHandler</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, i2c_stm32f4xx_1.o(i.I2C_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = I2C_ER_IRQHandler &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
</UL>

<P><STRONG><a name="[244]"></a>I2C_EV_IRQHandler</STRONG> (Thumb, 1500 bytes, Stack size 40 bytes, i2c_stm32f4xx_1.o(i.I2C_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_EV_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[245]"></a>I2C_GetDataCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, i2c_stm32f4xx_1.o(i.I2C_GetDataCount))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_GetDataCount
</UL>

<P><STRONG><a name="[246]"></a>I2C_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c_stm32f4xx_1.o(i.I2C_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_GetStatus
</UL>

<P><STRONG><a name="[247]"></a>I2C_Initialize</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, i2c_stm32f4xx_1.o(i.I2C_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = I2C_Initialize &rArr; HAL_DMA_Init &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Initialize
</UL>

<P><STRONG><a name="[248]"></a>I2C_MasterReceive</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, i2c_stm32f4xx_1.o(i.I2C_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_MasterReceive &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MasterReceive
</UL>

<P><STRONG><a name="[249]"></a>I2C_MasterTransmit</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, i2c_stm32f4xx_1.o(i.I2C_MasterTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_MasterTransmit &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MasterTransmit
</UL>

<P><STRONG><a name="[24a]"></a>I2C_PowerControl</STRONG> (Thumb, 666 bytes, Stack size 16 bytes, i2c_stm32f4xx_1.o(i.I2C_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = I2C_PowerControl &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_PowerControl
</UL>

<P><STRONG><a name="[24b]"></a>I2C_SlaveReceive</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, i2c_stm32f4xx_1.o(i.I2C_SlaveReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_SlaveReceive &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_SlaveReceive
</UL>

<P><STRONG><a name="[24c]"></a>I2C_SlaveTransmit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, i2c_stm32f4xx_1.o(i.I2C_SlaveTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_SlaveTransmit &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_SlaveTransmit
</UL>

<P><STRONG><a name="[24d]"></a>I2C_Uninitialize</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, i2c_stm32f4xx_1.o(i.I2C_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Uninitialize
</UL>

<P><STRONG><a name="[e1]"></a>AbortTransfer</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, mci_stm32f4xx_1.o(i.AbortTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = AbortTransfer &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>CardPower</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mci_stm32f4xx_1.o(i.CardPower))
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>Control</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, mci_stm32f4xx_1.o(i.Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[26f]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, mci_stm32f4xx_1.o(i.Enable_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[d8]"></a>GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mci_stm32f4xx_1.o(i.GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>GetStatus</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, mci_stm32f4xx_1.o(i.GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mci_stm32f4xx_1.o(i.GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>Initialize</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, mci_stm32f4xx_1.o(i.Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Initialize &rArr; HAL_DMA_Init &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>PowerControl</STRONG> (Thumb, 398 bytes, Stack size 16 bytes, mci_stm32f4xx_1.o(i.PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PowerControl &rArr; HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>RX_DMA_Complete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mci_stm32f4xx_1.o(i.RX_DMA_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RX_DMA_Complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f4xx_1.o(i.Initialize)
</UL>
<P><STRONG><a name="[dd]"></a>ReadCD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mci_stm32f4xx_1.o(i.ReadCD))
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>ReadWP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mci_stm32f4xx_1.o(i.ReadWP))
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>SendCommand</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, mci_stm32f4xx_1.o(i.SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>SetupTransfer</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, mci_stm32f4xx_1.o(i.SetupTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SetupTransfer &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>Uninitialize</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mci_stm32f4xx_1.o(i.Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[27a]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, otg_fs_stm32f4xx_1.o(i.Enable_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsConfigure
</UL>

<P><STRONG><a name="[28b]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, spi_stm32f4xx_1.o(i.Enable_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>

<P><STRONG><a name="[ee]"></a>SPI1_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f4xx_1.o(i.SPI1_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SPI1_Control &rArr; SPI_Control &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>SPI1_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx_1.o(i.SPI1_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>SPI1_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_stm32f4xx_1.o(i.SPI1_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI1_GetStatus &rArr; SPI_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>SPI1_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f4xx_1.o(i.SPI1_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI1_Initialize &rArr; SPI_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>SPI1_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f4xx_1.o(i.SPI1_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI1_PowerControl &rArr; SPI_PowerControl &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>SPI1_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f4xx_1.o(i.SPI1_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI1_Receive &rArr; SPI_Receive &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>SPI1_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f4xx_1.o(i.SPI1_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI1_Send &rArr; SPI_Send &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>SPI1_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi_stm32f4xx_1.o(i.SPI1_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI1_Transfer &rArr; SPI_Transfer &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>SPI1_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx_1.o(i.SPI1_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPI1_Uninitialize &rArr; SPI_Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>SPIX_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f4xx_1.o(i.SPIX_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>SPIX_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f4xx_1.o(i.SPIX_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIX_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[281]"></a>SPI_Control</STRONG> (Thumb, 1132 bytes, Stack size 56 bytes, spi_stm32f4xx_1.o(i.SPI_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = SPI_Control &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Control
</UL>

<P><STRONG><a name="[282]"></a>SPI_GetDataCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_stm32f4xx_1.o(i.SPI_GetDataCount))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GetDataCount
</UL>

<P><STRONG><a name="[283]"></a>SPI_GetStatus</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, spi_stm32f4xx_1.o(i.SPI_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GetStatus
</UL>

<P><STRONG><a name="[284]"></a>SPI_IRQHandler</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, spi_stm32f4xx_1.o(i.SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI_IRQHandler &rArr; SPI_RxData
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxData
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[285]"></a>SPI_Initialize</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, spi_stm32f4xx_1.o(i.SPI_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Initialize
</UL>

<P><STRONG><a name="[28e]"></a>SPI_PeripheralReset</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, spi_stm32f4xx_1.o(i.SPI_PeripheralReset))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[286]"></a>SPI_PowerControl</STRONG> (Thumb, 554 bytes, Stack size 16 bytes, spi_stm32f4xx_1.o(i.SPI_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_PowerControl &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PeripheralReset
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_PowerControl
</UL>

<P><STRONG><a name="[287]"></a>SPI_Receive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, spi_stm32f4xx_1.o(i.SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Receive &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Receive
</UL>

<P><STRONG><a name="[28c]"></a>SPI_RxData</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, spi_stm32f4xx_1.o(i.SPI_RxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_RxData
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>

<P><STRONG><a name="[288]"></a>SPI_Send</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, spi_stm32f4xx_1.o(i.SPI_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Send &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Send
</UL>

<P><STRONG><a name="[289]"></a>SPI_Transfer</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, spi_stm32f4xx_1.o(i.SPI_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Transfer &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>

<P><STRONG><a name="[28d]"></a>SPI_TxData</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, spi_stm32f4xx_1.o(i.SPI_TxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>

<P><STRONG><a name="[28a]"></a>SPI_Uninitialize</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, spi_stm32f4xx_1.o(i.SPI_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI_Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Uninitialize
</UL>

<P><STRONG><a name="[f5]"></a>USBD_DeviceConnect</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_DeviceConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_DeviceConnect &rArr; dbgEVR &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEVR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>USBD_DeviceDisconnect</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_DeviceDisconnect))
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>USBD_DeviceGetState</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_DeviceGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_DeviceGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>USBD_DeviceRemoteWakeup</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_DeviceRemoteWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = USBD_DeviceRemoteWakeup &rArr; HAL_Delay &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>USBD_DeviceSetAddress</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_DeviceSetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_DeviceSetAddress &rArr; dbgEVR &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEVR
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>USBD_EndpointConfigure</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_EndpointConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_EndpointConfigure &rArr; dbgEVR &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEVR
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[2de]"></a>USBD_EndpointReadSet</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_EndpointReadSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_EndpointReadSet &rArr; dbgEVR &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEVR
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetFrameNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointTransfer
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
</UL>

<P><STRONG><a name="[fd]"></a>USBD_EndpointStall</STRONG> (Thumb, 454 bytes, Stack size 32 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_EndpointStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_EndpointStall &rArr; dbgEVR &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEVR
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FlushInEpFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>USBD_EndpointTransfer</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_EndpointTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBD_EndpointTransfer &rArr; USBD_EndpointReadSet &rArr; dbgEVR &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEVR
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointReadSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>USBD_EndpointTransferAbort</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_EndpointTransferAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_EndpointTransferAbort &rArr; dbgEVR &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEVR
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FlushInEpFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>USBD_EndpointTransferGetResult</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_EndpointTransferGetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_EndpointTransferGetResult &rArr; dbgEVR &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEVR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>USBD_EndpointUnconfigure</STRONG> (Thumb, 524 bytes, Stack size 32 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_EndpointUnconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_EndpointUnconfigure &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[2df]"></a>USBD_FlushInEpFifo</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_FlushInEpFifo))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointTransferAbort
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStall
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
</UL>

<P><STRONG><a name="[f1]"></a>USBD_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>USBD_GetFrameNumber</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_GetFrameNumber))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteToFifo
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointReadSet
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>USBD_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>USBD_Initialize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_Initialize &rArr; OTG_FS_PinsConfigure &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsConfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>USBD_PowerControl</STRONG> (Thumb, 702 bytes, Stack size 16 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = USBD_PowerControl &rArr; HAL_Delay &rArr; HAL_GetTick &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEVR
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[2e3]"></a>USBD_ReadFromFifo</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_ReadFromFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBD_ReadFromFifo &rArr; dbgEVR &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEVR
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
</UL>

<P><STRONG><a name="[fa]"></a>USBD_ReadSetupPacket</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_ReadSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_ReadSetupPacket &rArr; dbgEVR &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgEVR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[2e2]"></a>USBD_Reset</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FlushInEpFifo
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerControl
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
</UL>

<P><STRONG><a name="[f3]"></a>USBD_Uninitialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_Uninitialize &rArr; OTG_FS_PinsUnconfigure &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsUnconfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx_1.o(.constdata)
</UL>
<P><STRONG><a name="[2e4]"></a>USBD_WriteToFifo</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, usbd_fs_stm32f4xx_1.o(i.USBD_WriteToFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_WriteToFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetFrameNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
</UL>

<P><STRONG><a name="[237]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma_1.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[239]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_dma_1.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[23b]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_dma_1.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1f9]"></a>EvrFsIOC_DriveIdInvalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_ioc.o(i.EvrFsIOC_DriveIdInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrFsIOC_DriveIdInvalid &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_write_sector
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_unlock
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_read_sector
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_read_info
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_lock
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_get_cache
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_device_ctrl
</UL>

<P><STRONG><a name="[1fa]"></a>EvrFsIOC_NotAllowed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_ioc.o(i.EvrFsIOC_NotAllowed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrFsIOC_NotAllowed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_write_sector
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_unlock
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_read_sector
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_read_info
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_lock
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_get_id
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_get_cache
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_device_ctrl
</UL>

<P><STRONG><a name="[3e8]"></a>fs_component_init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, fs_mapi.o(i.fs_component_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fs_component_init &rArr; fs_get_rtos_tick_freq &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config_evr
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_rtos_tick_freq
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_cdrive
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[1fb]"></a>EvrFsMcMCI_ReadXferSetupError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_mc_mci.o(i.EvrFsMcMCI_ReadXferSetupError))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EvrFsMcMCI_ReadXferSetupError &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadSector
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_switch_func
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_ext_csd
</UL>

<P><STRONG><a name="[1fc]"></a>EvrFsMcMCI_SendCommandError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_mc_mci.o(i.EvrFsMcMCI_SendCommandError))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EvrFsMcMCI_SendCommandError &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadSector
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_switch_func
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_switch
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_stop_transmission
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_sleep_awake
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_ext_csd
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_deselect
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_enable_acmd
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[1fd]"></a>EvrFsMcMCI_WriteXferSetupError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_mc_mci.o(i.EvrFsMcMCI_WriteXferSetupError))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EvrFsMcMCI_WriteXferSetupError &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[45b]"></a>fill_cid</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, fs_mc_mci.o(i.fill_cid))
<BR><BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[466]"></a>get_block_number</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, fs_mc_mci.o(i.get_block_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_block_number
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[452]"></a>mc_control_lock</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, fs_mc_mci.o(i.mc_control_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mc_control_lock &rArr; mc_set_block_len &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_WriteXferSetupError
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[456]"></a>mc_control_sleep</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, fs_mc_mci.o(i.mc_control_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mc_control_sleep &rArr; mc_sleep_awake &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_sleep_awake
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
</UL>

<P><STRONG><a name="[458]"></a>mc_enable_acmd</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fs_mc_mci.o(i.mc_enable_acmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mc_enable_acmd &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[463]"></a>mc_native_init</STRONG> (Thumb, 1450 bytes, Stack size 96 bytes, fs_mc_mci.o(i.mc_native_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mc_native_init &rArr; mc_control_lock &rArr; mc_set_block_len &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_lock_unlock
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_idle_clock
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_data_timeout
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_bus_mode
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_bus_speed_mode
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_bus_speed
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_switch_func
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_switch
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_ext_csd
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_deselect
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_enable_acmd
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_number
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_cid
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
</UL>

<P><STRONG><a name="[455]"></a>mc_read_status</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mc_read_status &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_sleep
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[46a]"></a>mc_select_bus_width</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, fs_mc_mci.o(i.mc_select_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mc_select_bus_width &rArr; mc_switch &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_bus_width
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_switch
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_enable_acmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[45a]"></a>mc_select_deselect</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_select_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mc_select_deselect &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadSector
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[45c]"></a>mc_select_tran_state</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, fs_mc_mci.o(i.mc_select_tran_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mc_select_tran_state &rArr; mc_stop_transmission &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_stop_transmission
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_deselect
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadSector
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
</UL>

<P><STRONG><a name="[468]"></a>mc_send_ext_csd</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fs_mc_mci.o(i.mc_send_ext_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mc_send_ext_csd &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_ReadXferSetupError
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[453]"></a>mc_set_block_len</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fs_mc_mci.o(i.mc_set_block_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mc_set_block_len &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[457]"></a>mc_sleep_awake</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, fs_mc_mci.o(i.mc_sleep_awake))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mc_sleep_awake &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_sleep
</UL>

<P><STRONG><a name="[464]"></a>mc_stop_transmission</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_stop_transmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mc_stop_transmission &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadSector
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
</UL>

<P><STRONG><a name="[469]"></a>mc_switch</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fs_mc_mci.o(i.mc_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mc_switch &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[46b]"></a>mc_switch_func</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, fs_mc_mci.o(i.mc_switch_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mc_switch_func &rArr; mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_SendCommandError
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcMCI_ReadXferSetupError
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[454]"></a>mc_wfe</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fs_mc_mci.o(i.mc_wfe))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mc_wfe &rArr; fs_get_sys_tick_us &rArr; osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq &rArr; EvrRtxKernelGetSysTimerFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadSector
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_switch_func
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_switch
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_stop_transmission
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_sleep_awake
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_ext_csd
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_deselect
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_enable_acmd
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[460]"></a>mci_bus_speed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs_mc_mci.o(i.mci_bus_speed))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[45e]"></a>mci_bus_speed_mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_mc_mci.o(i.mci_bus_speed_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mci_bus_speed_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[45d]"></a>mci_bus_width</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_mc_mci.o(i.mci_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mci_bus_width
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
</UL>

<P><STRONG><a name="[461]"></a>mci_card_power</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fs_mc_mci.o(i.mci_card_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mci_card_power &rArr; fs_set_rtos_delay &rArr; osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_UnInit
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
</UL>

<P><STRONG><a name="[465]"></a>mci_cmd_bus_mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_mc_mci.o(i.mci_cmd_bus_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mci_cmd_bus_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[45f]"></a>mci_data_timeout</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fs_mc_mci.o(i.mci_data_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mci_data_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[462]"></a>mci_idle_clock</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_mc_mci.o(i.mci_idle_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mci_idle_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[459]"></a>mci_update_sw_state</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, fs_mc_mci.o(i.mci_update_sw_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mci_update_sw_state &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
</UL>

<P><STRONG><a name="[219]"></a>EvrUSBD_Core_ConfigureEp0Failed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_lib_core.o(i.EvrUSBD_Core_ConfigureEp0Failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_Core_ConfigureEp0Failed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigureEndpoint0
</UL>

<P><STRONG><a name="[2a2]"></a>USBD_CheckDevice</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_lib_core.o(i.USBD_CheckDevice))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Disconnect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
</UL>

<P><STRONG><a name="[29f]"></a>USBD_ConfigureEndpoint0</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_lib_core.o(i.USBD_ConfigureEndpoint0))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = USBD_ConfigureEndpoint0 &rArr; USBD_DriverEndpointConfigure &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_Core_ConfigureEp0Failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
</UL>

<P><STRONG><a name="[2a4]"></a>USBD_Core</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, usbd_lib_core.o(i.USBD_Core))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = USBD_Core &rArr; USBD_Endpoint0 &rArr; USBD_ReqSetInterface &rArr; USBD_EndpointStart &rArr; USBD_MSC_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetCore
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigureEndpoint0
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Thread
</UL>

<P><STRONG><a name="[2a7]"></a>USBD_Endpoint0</STRONG> (Thumb, 1078 bytes, Stack size 32 bytes, usbd_lib_core.o(i.USBD_Endpoint0))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = USBD_Endpoint0 &rArr; USBD_ReqSetInterface &rArr; USBD_EndpointStart &rArr; USBD_MSC_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_CDC_ReqToIF
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_ADC_ReqToIF
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_ADC_ReqToEP
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_HID_ReqToIF
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_CDC_ReqToIF
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_ADC_ReqToIF
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_ADC_ReqToEP
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_MSC_ReqToIF
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverReadSetupPacket
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceSetAddress
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketReceived
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketProcessed
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_OutDataReceived
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_InDataSent
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStageDone
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStage
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStageDone
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetStatus
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetMSDescriptor
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
</UL>

<P><STRONG><a name="[2d1]"></a>USBD_ReqGetDescriptor</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, usbd_lib_core.o(i.USBD_ReqGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_ReqGetDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_ReqGetDescriptor_HID
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2d9]"></a>USBD_ReqGetMSDescriptor</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, usbd_lib_core.o(i.USBD_ReqGetMSDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ReqGetMSDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_ReqGetExtProp_CC
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2cf]"></a>USBD_ReqGetStatus</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, usbd_lib_core.o(i.USBD_ReqGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_ReqGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2d0]"></a>USBD_ReqSetClrFeature</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, usbd_lib_core.o(i.USBD_ReqSetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = USBD_ReqSetClrFeature &rArr; USBD_Endpoint0_ClearFeatureStall_MSC &rArr; USBD_MSC_EndpointClearFeatureStall &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStop
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStart
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_ClearFeatureStall_MSC
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2d2]"></a>USBD_ReqSetConfiguration</STRONG> (Thumb, 614 bytes, Stack size 48 bytes, usbd_lib_core.o(i.USBD_ReqSetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = USBD_ReqSetConfiguration &rArr; USBD_EndpointStart &rArr; USBD_MSC_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfiguration
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStop
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStart
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2d3]"></a>USBD_ReqSetInterface</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, usbd_lib_core.o(i.USBD_ReqSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = USBD_ReqSetInterface &rArr; USBD_EndpointStart &rArr; USBD_MSC_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStop
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStart
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[2a5]"></a>USBD_ResetCore</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_lib_core.o(i.USBD_ResetCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ResetCore
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
</UL>

<P><STRONG><a name="[21a]"></a>EvrUSBD_Driver_EndpointConfigureFailed</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_lib_drv.o(i.EvrUSBD_Driver_EndpointConfigureFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrUSBD_Driver_EndpointConfigureFailed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
</UL>

<P><STRONG><a name="[21b]"></a>EvrUSBD_Driver_EndpointStallFailed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_lib_drv.o(i.EvrUSBD_Driver_EndpointStallFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_Driver_EndpointStallFailed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
</UL>

<P><STRONG><a name="[21c]"></a>EvrUSBD_Driver_EndpointTransferAbort</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_lib_drv.o(i.EvrUSBD_Driver_EndpointTransferAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_Driver_EndpointTransferAbort &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>

<P><STRONG><a name="[21d]"></a>EvrUSBD_Driver_EndpointTransferFailed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_lib_drv.o(i.EvrUSBD_Driver_EndpointTransferFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_Driver_EndpointTransferFailed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>

<P><STRONG><a name="[21e]"></a>EvrUSBD_Driver_EndpointUnconfigureFailed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_lib_drv.o(i.EvrUSBD_Driver_EndpointUnconfigureFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_Driver_EndpointUnconfigureFailed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
</UL>

<P><STRONG><a name="[21f]"></a>EvrUSBD_MSC_Inquiry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_MSC_Inquiry &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Inquiry
</UL>

<P><STRONG><a name="[220]"></a>EvrUSBD_MSC_MediaRemoval</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_MediaRemoval))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_MSC_MediaRemoval &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[221]"></a>EvrUSBD_MSC_ModeSense</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_ModeSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_MSC_ModeSense &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense6
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense10
</UL>

<P><STRONG><a name="[222]"></a>EvrUSBD_MSC_OnCheckMedia</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_OnCheckMedia))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_MSC_OnCheckMedia &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMediaHW
</UL>

<P><STRONG><a name="[223]"></a>EvrUSBD_MSC_OnGetMediaCapacity</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_OnGetMediaCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrUSBD_MSC_OnGetMediaCapacity &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadFormatCapacity
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadCapacity
</UL>

<P><STRONG><a name="[224]"></a>EvrUSBD_MSC_OnWrite</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_OnWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrUSBD_MSC_OnWrite &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
</UL>

<P><STRONG><a name="[225]"></a>EvrUSBD_MSC_OnWriteFailed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_OnWriteFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_MSC_OnWriteFailed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
</UL>

<P><STRONG><a name="[226]"></a>EvrUSBD_MSC_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrUSBD_MSC_Read &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RW_Setup
</UL>

<P><STRONG><a name="[227]"></a>EvrUSBD_MSC_ReadCapacity</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_MSC_ReadCapacity &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadCapacity
</UL>

<P><STRONG><a name="[228]"></a>EvrUSBD_MSC_ReadDone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_ReadDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_MSC_ReadDone &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RW_Setup
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
</UL>

<P><STRONG><a name="[229]"></a>EvrUSBD_MSC_ReadFormatCapacities</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_ReadFormatCapacities))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_MSC_ReadFormatCapacities &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadFormatCapacity
</UL>

<P><STRONG><a name="[22a]"></a>EvrUSBD_MSC_RequestSense</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_MSC_RequestSense &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RequestSense
</UL>

<P><STRONG><a name="[22b]"></a>EvrUSBD_MSC_StartStopUnit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_StartStopUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_MSC_StartStopUnit &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StartStopUnit
</UL>

<P><STRONG><a name="[22c]"></a>EvrUSBD_MSC_TestUnitReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_MSC_TestUnitReady &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[22d]"></a>EvrUSBD_MSC_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrUSBD_MSC_Write &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RW_Setup
</UL>

<P><STRONG><a name="[22e]"></a>EvrUSBD_MSC_WriteDone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_msc.o(i.EvrUSBD_MSC_WriteDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrUSBD_MSC_WriteDone &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RW_Setup
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
</UL>

<P><STRONG><a name="[2f5]"></a>USBD_MSC_CheckCommandDataIn</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_lib_msc.o(i.USBD_MSC_CheckCommandDataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_CheckCommandDataIn &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RequestSense
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadFormatCapacity
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadCapacity
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RW_Setup
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense6
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense10
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Inquiry
</UL>

<P><STRONG><a name="[2f7]"></a>USBD_MSC_CheckCommandDataOut</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_lib_msc.o(i.USBD_MSC_CheckCommandDataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_CheckCommandDataOut &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RW_Setup
</UL>

<P><STRONG><a name="[2f8]"></a>USBD_MSC_CheckCommandNoData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_lib_msc.o(i.USBD_MSC_CheckCommandNoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_CheckCommandNoData &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StartStopUnit
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[2f4]"></a>USBD_MSC_CheckInstance</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usbd_lib_msc.o(i.USBD_MSC_CheckInstance))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Uninitialize
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Thread
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Reset
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Initialize
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EndpointStart
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetMaxLUN
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EndpointClearFeatureStall
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_BulkOnlyMassStorageReset
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
</UL>

<P><STRONG><a name="[2f9]"></a>USBD_MSC_CheckMediaHW</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, usbd_lib_msc.o(i.USBD_MSC_CheckMediaHW))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_CheckMediaHW &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusFailed
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_OnCheckMedia
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadFormatCapacity
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadCapacity
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RW_Setup
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense6
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense10
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[2fa]"></a>USBD_MSC_DataInTransfer</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbd_lib_msc.o(i.USBD_MSC_DataInTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_DataInTransfer &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RequestSense
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadFormatCapacity
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadCapacity
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense6
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense10
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Inquiry
</UL>

<P><STRONG><a name="[2fb]"></a>USBD_MSC_EpBulkIn</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usbd_lib_msc.o(i.USBD_MSC_EpBulkIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_EpBulkIn &rArr; USBD_MSC_MemoryRead &rArr; USBD_MSC_CheckMediaHW &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Thread
</UL>

<P><STRONG><a name="[2ff]"></a>USBD_MSC_GetCBW</STRONG> (Thumb, 542 bytes, Stack size 24 bytes, usbd_lib_msc.o(i.USBD_MSC_GetCBW))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_GetCBW &rArr; USBD_MSC_MemoryRead &rArr; USBD_MSC_CheckMediaHW &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusPhaseError
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusPassed
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusFailed
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StartStopUnit
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RequestSense
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadFormatCapacity
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadCapacity
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RW_Setup
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense6
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ModeSense10
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Inquiry
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMediaHW
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckCommandNoData
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_TestUnitReady
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_MediaRemoval
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Thread
</UL>

<P><STRONG><a name="[301]"></a>USBD_MSC_Inquiry</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, usbd_lib_msc.o(i.USBD_MSC_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_Inquiry &rArr; USBD_MSC_CheckCommandDataIn &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusFailed
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckCommandDataIn
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_Inquiry
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[2fc]"></a>USBD_MSC_MemoryRead</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, usbd_lib_msc.o(i.USBD_MSC_MemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_MemoryRead &rArr; USBD_MSC_CheckMediaHW &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusFailed
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMediaHW
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_ReadDone
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EpBulkIn
</UL>

<P><STRONG><a name="[30a]"></a>USBD_MSC_MemoryWrite</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, usbd_lib_msc.o(i.USBD_MSC_MemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_MemoryWrite &rArr; USBD_MSC_CheckMediaHW &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusPassed
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusFailed
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMediaHW
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_WriteDone
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_OnWriteFailed
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_OnWrite
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Thread
</UL>

<P><STRONG><a name="[305]"></a>USBD_MSC_ModeSense10</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usbd_lib_msc.o(i.USBD_MSC_ModeSense10))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_ModeSense10 &rArr; USBD_MSC_CheckMediaHW &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMediaHW
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckCommandDataIn
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_ModeSense
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[304]"></a>USBD_MSC_ModeSense6</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, usbd_lib_msc.o(i.USBD_MSC_ModeSense6))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_ModeSense6 &rArr; USBD_MSC_CheckMediaHW &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMediaHW
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckCommandDataIn
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_ModeSense
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[308]"></a>USBD_MSC_RW_Setup</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, usbd_lib_msc.o(i.USBD_MSC_RW_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_RW_Setup &rArr; USBD_MSC_CheckMediaHW &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusFailed
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMediaHW
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckCommandDataOut
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckCommandDataIn
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_WriteDone
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_Write
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_ReadDone
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[307]"></a>USBD_MSC_ReadCapacity</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, usbd_lib_msc.o(i.USBD_MSC_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_ReadCapacity &rArr; USBD_MSC_CheckMediaHW &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusFailed
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMediaHW
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckCommandDataIn
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_ReadCapacity
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_OnGetMediaCapacity
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[306]"></a>USBD_MSC_ReadFormatCapacity</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, usbd_lib_msc.o(i.USBD_MSC_ReadFormatCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_ReadFormatCapacity &rArr; USBD_MSC_CheckMediaHW &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusFailed
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMediaHW
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckCommandDataIn
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_ReadFormatCapacities
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_OnGetMediaCapacity
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[300]"></a>USBD_MSC_RequestSense</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, usbd_lib_msc.o(i.USBD_MSC_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_RequestSense &rArr; USBD_MSC_CheckCommandDataIn &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataInTransfer
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckCommandDataIn
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_RequestSense
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[2fd]"></a>USBD_MSC_SetCSW</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_lib_msc.o(i.USBD_MSC_SetCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusPassed
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusFailed
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EpBulkIn
</UL>

<P><STRONG><a name="[2fe]"></a>USBD_MSC_SetStallEP</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_lib_msc.o(i.USBD_MSC_SetStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_SetStallEP &rArr; USBD_DriverEndpointStall &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckInstance
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusPhaseError
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusFailed
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_EpBulkIn
</UL>

<P><STRONG><a name="[302]"></a>USBD_MSC_StartStopUnit</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, usbd_lib_msc.o(i.USBD_MSC_StartStopUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_StartStopUnit &rArr; USBD_MSC_CheckCommandNoData &rArr; USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusPassed
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StatusFailed
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckCommandNoData
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrUSBD_MSC_StartStopUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[2f6]"></a>USBD_MSC_StatusFailed</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usbd_lib_msc.o(i.USBD_MSC_StatusFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_StatusFailed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StartStopUnit
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadFormatCapacity
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_ReadCapacity
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RW_Setup
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryRead
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Inquiry
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckMediaHW
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckCommandNoData
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckCommandDataOut
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_CheckCommandDataIn
</UL>

<P><STRONG><a name="[303]"></a>USBD_MSC_StatusPassed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_lib_msc.o(i.USBD_MSC_StatusPassed))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_StatusPassed &rArr; USBD_MSC_SetCSW &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_StartStopUnit
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_MemoryWrite
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[309]"></a>USBD_MSC_StatusPhaseError</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_lib_msc.o(i.USBD_MSC_StatusPhaseError))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = USBD_MSC_StatusPhaseError &rArr; USBD_MSC_SetStallEP &rArr; USBD_DriverEndpointStall &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxErrorNotify &rArr; tbErr &rArr; flashLED &rArr; tbDelay_ms &rArr; tbTimeStamp &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_SetStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Thread
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_GetCBW
</UL>

<P><STRONG><a name="[1f2]"></a>EvrFsFAT_FileHandleInvalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_fat.o(i.EvrFsFAT_FileHandleInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrFsFAT_FileHandleInvalid &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[1f3]"></a>EvrFsFAT_FormatOptionDetected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs_fat.o(i.EvrFsFAT_FormatOptionDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrFsFAT_FormatOptionDetected &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[1f4]"></a>EvrFsFAT_InvalidParameter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_fat.o(i.EvrFsFAT_InvalidParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrFsFAT_InvalidParameter &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[1f5]"></a>EvrFsFAT_NameCacheEntryInsert</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fs_fat.o(i.EvrFsFAT_NameCacheEntryInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EvrFsFAT_NameCacheEntryInsert &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[1f6]"></a>EvrFsFAT_PathName</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs_fat.o(i.EvrFsFAT_PathName))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrFsFAT_PathName &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[1f7]"></a>EvrFsFAT_SectorReadFailed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_fat.o(i.EvrFsFAT_SectorReadFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[1f8]"></a>EvrFsFAT_SectorWriteFailed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_fat.o(i.EvrFsFAT_SectorWriteFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[359]"></a>alloc_clus</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[35a]"></a>alloc_table_read</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_table_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[35c]"></a>alloc_table_write</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, fs_fat.o(i.alloc_table_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>

<P><STRONG><a name="[37f]"></a>bs_read</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, fs_fat.o(i.bs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bs_read &rArr; read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[381]"></a>bs_write</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, fs_fat.o(i.bs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bs_write &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[35e]"></a>cache_fat</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, fs_fat.o(i.cache_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorWriteFailed
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorReadFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[46e]"></a>char_validate</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, fs_fat.o(i.char_validate))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_basis_gen
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
</UL>

<P><STRONG><a name="[391]"></a>clear_clus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.clear_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = clear_clus &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[392]"></a>clus_to_sect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_fat.o(i.clus_to_sect))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[3ab]"></a>create_dot_entries</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, fs_fat.o(i.create_dot_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = create_dot_entries &rArr; entry_read &rArr; read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3b1]"></a>create_lfn_entry</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, fs_fat.o(i.create_lfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = create_lfn_entry &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3b3]"></a>create_sfn_entry</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, fs_fat.o(i.create_sfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = create_sfn_entry &rArr; entry_read &rArr; read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3b0]"></a>entry_flush</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fs_fat.o(i.entry_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = entry_flush &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[3f1]"></a>entry_pos_comp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fs_fat.o(i.entry_pos_comp))
<BR><BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[3b2]"></a>entry_pos_inc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fs_fat.o(i.entry_pos_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[3ac]"></a>entry_read</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.entry_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = entry_read &rArr; read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[3f2]"></a>entry_type</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs_fat.o(i.entry_type))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[3ca]"></a>extract_date</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_fat.o(i.extract_date))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[3cb]"></a>extract_time</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fs_fat.o(i.extract_time))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[448]"></a>fat_crc32</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, fs_fat.o(i.fat_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
</UL>

<P><STRONG><a name="[3dc]"></a>file_locked</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs_fat.o(i.file_locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = file_locked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[3cd]"></a>find_param</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, fs_fat.o(i.find_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_param
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[3af]"></a>format_date</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fs_fat.o(i.format_date))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[3ae]"></a>format_time</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs_fat.o(i.format_time))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[3f0]"></a>frec_allocate</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, fs_fat.o(i.frec_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3f3]"></a>frec_find</STRONG> (Thumb, 552 bytes, Stack size 128 bytes, fs_fat.o(i.frec_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_char_cnt
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_NameCacheEntryInsert
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3fa]"></a>frec_find_elink</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, fs_fat.o(i.frec_find_elink))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = frec_find_elink &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3c9]"></a>frec_next</STRONG> (Thumb, 450 bytes, Stack size 128 bytes, fs_fat.o(i.frec_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_char_cnt
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_NameCacheEntryInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[3d9]"></a>fsinfo_read</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, fs_fat.o(i.fsinfo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fsinfo_read &rArr; read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[3c5]"></a>fsinfo_write</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fs_fat.o(i.fsinfo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[35b]"></a>get_EOC</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fs_fat.o(i.get_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[35d]"></a>get_fat_sect</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.get_fat_sect))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>

<P><STRONG><a name="[3d3]"></a>get_root_clus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(i.get_root_clus))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[3cf]"></a>label_write</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fs_fat.o(i.label_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = label_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[3f4]"></a>lfn_char_cnt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_fat.o(i.lfn_char_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[3df]"></a>link_clus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_fat.o(i.link_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = link_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[3f5]"></a>long_ent_hash</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, fs_fat.o(i.long_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = long_ent_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[3d8]"></a>mbr_read</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, fs_fat.o(i.mbr_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbr_read &rArr; read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[3ce]"></a>mbr_write</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, fs_fat.o(i.mbr_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbr_write &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[46d]"></a>name_analyse</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, fs_fat.o(i.name_analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_analyse
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[46f]"></a>name_basis_gen</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, fs_fat.o(i.name_basis_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_basis_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3fb]"></a>name_hash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.name_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
</UL>

<P><STRONG><a name="[4b2]"></a>name_nt_gen</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, fs_fat.o(i.name_nt_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_nt_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[4b1]"></a>name_strip</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, fs_fat.o(i.name_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_strip
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[470]"></a>name_validate</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fs_fat.o(i.name_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = name_validate &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
</UL>

<P><STRONG><a name="[3de]"></a>path_create</STRONG> (Thumb, 574 bytes, Stack size 144 bytes, fs_fat.o(i.path_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_nt_gen
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_basis_gen
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_NameCacheEntryInsert
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[3c7]"></a>path_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fs_fat.o(i.path_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = path_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[3c8]"></a>path_open</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, fs_fat.o(i.path_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[3db]"></a>path_validate</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fs_fat.o(i.path_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = path_validate &rArr; name_validate &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[3da]"></a>read_cache</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, fs_fat.o(i.read_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = read_cache &rArr; read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorReadFailed
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[380]"></a>read_sector</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fs_fat.o(i.read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorReadFailed
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_read
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[3f7]"></a>sfn_extract</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fs_fat.o(i.sfn_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sfn_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[3f8]"></a>short_ent_hash</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, fs_fat.o(i.short_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = short_ent_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[3f6]"></a>sn_chksum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_fat.o(i.sn_chksum))
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[3dd]"></a>unlink_clus</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, fs_fat.o(i.unlink_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = unlink_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[393]"></a>write_cache</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, fs_fat.o(i.write_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorWriteFailed
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[382]"></a>write_sector</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs_fat.o(i.write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorWriteFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
</UL>

<P><STRONG><a name="[155]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[182]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[65]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[19e]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[66]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
